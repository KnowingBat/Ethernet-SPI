
Ethernet-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005830  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb4  08005bb4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bbc  08005bbc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200000a0  08005c64  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005c64  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103e9  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a79  00000000  00000000  000304b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00032f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182cc  00000000  00000000  00034578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eed9  00000000  00000000  0004c844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf4c  00000000  00000000  0005b71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c4  00000000  00000000  000e86bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059b8 	.word	0x080059b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	080059b8 	.word	0x080059b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b38      	ldr	r3, [pc, #224]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a37      	ldr	r2, [pc, #220]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a30      	ldr	r2, [pc, #192]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a29      	ldr	r2, [pc, #164]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <MX_GPIO_Init+0xfc>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0xfc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RST_WIZCHIP_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <MX_GPIO_Init+0x100>)
 8000616:	f002 fcd3 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <MX_GPIO_Init+0x104>)
 8000620:	f002 fcce 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <MX_GPIO_Init+0x108>)
 800063c:	f002 fb3c 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RST_WIZCHIP_Pin;
 8000640:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0x100>)
 800065a:	f002 fb2d 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_SPI2_Pin;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SPI2_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0x104>)
 8000676:	f002 fb1f 	bl	8002cb8 <HAL_GPIO_Init>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020400 	.word	0x40020400
 8000690:	40020800 	.word	0x40020800

08000694 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_IWDG_Init+0x2c>)
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <MX_IWDG_Init+0x30>)
 800069c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_IWDG_Init+0x2c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_IWDG_Init+0x2c>)
 80006a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_IWDG_Init+0x2c>)
 80006ae:	f002 fca0 	bl	8002ff2 <HAL_IWDG_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80006b8:	f000 f9f4 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	40003000 	.word	0x40003000

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b0aa      	sub	sp, #168	; 0xa8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t mySocket;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}}; // 2 sockets of 2kb each
 80006ce:	4bb3      	ldr	r3, [pc, #716]	; (800099c <main+0x2d4>)
 80006d0:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80006d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	wiz_NetInfo netInfo = {
 80006da:	4bb1      	ldr	r3, [pc, #708]	; (80009a0 <main+0x2d8>)
 80006dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80006e0:	461d      	mov	r5, r3
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ea:	6020      	str	r0, [r4, #0]
 80006ec:	3404      	adds	r4, #4
 80006ee:	8021      	strh	r1, [r4, #0]
 80006f0:	3402      	adds	r4, #2
 80006f2:	0c0b      	lsrs	r3, r1, #16
 80006f4:	7023      	strb	r3, [r4, #0]
			.gw = {192,168,1,1},
			.dns = {8,8,8,8},
			.dhcp = NETINFO_STATIC
	};

	uint8_t state = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	uint8_t rxBuff[50];
	uint8_t txBuff[50];
	int32_t err_t;
	int32_t dataSize = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f002 f95d 	bl	80029c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f961 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff ff3d 	bl	8000588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070e:	f000 ff03 	bl	8001518 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000712:	f000 fd5b 	bl	80011cc <MX_SPI2_Init>
  MX_IWDG_Init();
 8000716:	f7ff ffbd 	bl	8000694 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  // Pulse on reset pin
  HAL_GPIO_WritePin(RST_WIZCHIP_GPIO_Port, RST_WIZCHIP_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000720:	48a0      	ldr	r0, [pc, #640]	; (80009a4 <main+0x2dc>)
 8000722:	f002 fc4d 	bl	8002fc0 <HAL_GPIO_WritePin>
  HAL_Delay(1); //wait 1 ms
 8000726:	2001      	movs	r0, #1
 8000728:	f002 f9bc 	bl	8002aa4 <HAL_Delay>
  HAL_GPIO_WritePin(RST_WIZCHIP_GPIO_Port, RST_WIZCHIP_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	489c      	ldr	r0, [pc, #624]	; (80009a4 <main+0x2dc>)
 8000734:	f002 fc44 	bl	8002fc0 <HAL_GPIO_WritePin>

  // Wizchip functions assignement
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000738:	499b      	ldr	r1, [pc, #620]	; (80009a8 <main+0x2e0>)
 800073a:	489c      	ldr	r0, [pc, #624]	; (80009ac <main+0x2e4>)
 800073c:	f001 fa6a 	bl	8001c14 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_readByte, wizchip_writeByte);
 8000740:	499b      	ldr	r1, [pc, #620]	; (80009b0 <main+0x2e8>)
 8000742:	489c      	ldr	r0, [pc, #624]	; (80009b4 <main+0x2ec>)
 8000744:	f001 fa8c 	bl	8001c60 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(wizchip_readBuff, wizchip_writeBuff);
 8000748:	499b      	ldr	r1, [pc, #620]	; (80009b8 <main+0x2f0>)
 800074a:	489c      	ldr	r0, [pc, #624]	; (80009bc <main+0x2f4>)
 800074c:	f001 fab4 	bl	8001cb8 <reg_wizchip_spiburst_cbfunc>

  // Wizchip initialization
  if(ctlwizchip(CW_INIT_WIZCHIP, (void *) memsize) == -1){
 8000750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000754:	4619      	mov	r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	f001 fada 	bl	8001d10 <ctlwizchip>
 800075c:	4603      	mov	r3, r0
 800075e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000762:	d103      	bne.n	800076c <main+0xa4>
  	// Error during initialization
  	printf("WIZCHIP init failed...\r\n");
 8000764:	4896      	ldr	r0, [pc, #600]	; (80009c0 <main+0x2f8>)
 8000766:	f004 f977 	bl	8004a58 <puts>
  	while(1);
 800076a:	e7fe      	b.n	800076a <main+0xa2>
  }

  // No errors during initialization
  printf("WIZCHIP initialized...\r\n");
 800076c:	4895      	ldr	r0, [pc, #596]	; (80009c4 <main+0x2fc>)
 800076e:	f004 f973 	bl	8004a58 <puts>

  if(ctlnetwork(CN_SET_NETINFO, (void *)&netInfo) == -1){
 8000772:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000776:	4619      	mov	r1, r3
 8000778:	2000      	movs	r0, #0
 800077a:	f001 fbab 	bl	8001ed4 <ctlnetwork>
 800077e:	4603      	mov	r3, r0
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d100      	bne.n	8000788 <main+0xc0>
  	// Errors
  	while(1);
 8000786:	e7fe      	b.n	8000786 <main+0xbe>
  }

  // Set interrupt mask for recv
  interrupt = IK_SOCK_1;
 8000788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078c:	80fb      	strh	r3, [r7, #6]
  if(ctlwizchip(CW_SET_INTRMASK, (void *)&interrupt) == -1){
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	4619      	mov	r1, r3
 8000792:	2004      	movs	r0, #4
 8000794:	f001 fabc 	bl	8001d10 <ctlwizchip>
 8000798:	4603      	mov	r3, r0
 800079a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800079e:	d100      	bne.n	80007a2 <main+0xda>
  	// Errors
  	while(1);
 80007a0:	e7fe      	b.n	80007a0 <main+0xd8>
  }

  HAL_IWDG_Refresh(&hiwdg);
 80007a2:	4889      	ldr	r0, [pc, #548]	; (80009c8 <main+0x300>)
 80007a4:	f002 fc67 	bl	8003076 <HAL_IWDG_Refresh>

  // Create a socket
  mySocket = socket(1, Sn_MR_TCP, 502, 0);
 80007a8:	2300      	movs	r3, #0
 80007aa:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f97d 	bl	8000ab0 <socket>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  if(mySocket != 1){
 80007bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d000      	beq.n	80007c6 <main+0xfe>
  	// Error in socket creation
  	while(1);
 80007c4:	e7fe      	b.n	80007c4 <main+0xfc>
  }

  // Listen socket for connections
  err_t = listen(mySocket);
 80007c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 faf4 	bl	8000db8 <listen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	// Check for server status
  	serverStatus = getSn_SR(mySocket);
 80007d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	3301      	adds	r3, #1
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 ff09 	bl	80015fc <WIZCHIP_READ>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

  	switch(state){
 80007f0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	f000 80aa 	beq.w	800094e <main+0x286>
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	f300 80c9 	bgt.w	8000992 <main+0x2ca>
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <main+0x142>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d03c      	beq.n	8000882 <main+0x1ba>
 8000808:	e0c3      	b.n	8000992 <main+0x2ca>
  	case 0: // Wait for client connections

  		if(serverStatus == SOCK_ESTABLISHED){
 800080a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800080e:	2b17      	cmp	r3, #23
 8000810:	f040 80b8 	bne.w	8000984 <main+0x2bc>
  			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2120      	movs	r1, #32
 8000818:	4862      	ldr	r0, [pc, #392]	; (80009a4 <main+0x2dc>)
 800081a:	f002 fbd1 	bl	8002fc0 <HAL_GPIO_WritePin>
  			ctlnetwork(CN_GET_NETINFO, (void *) &netInfo);
 800081e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000822:	4619      	mov	r1, r3
 8000824:	2001      	movs	r0, #1
 8000826:	f001 fb55 	bl	8001ed4 <ctlnetwork>
  			port = getSn_PORT(mySocket);
 800082a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	3301      	adds	r3, #1
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fedf 	bl	80015fc <WIZCHIP_READ>
 800083e:	4603      	mov	r3, r0
 8000840:	b29b      	uxth	r3, r3
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b29c      	uxth	r4, r3
 8000846:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	3301      	adds	r3, #1
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fed1 	bl	80015fc <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  			display_netinfo(mySocket, &netInfo, port);
 8000864:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8000868:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800086c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000870:	4618      	mov	r0, r3
 8000872:	f001 ff73 	bl	800275c <display_netinfo>
  			//send(mySocket, (uint8_t *)string, len);
  			state++;
 8000876:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800087a:	3301      	adds	r3, #1
 800087c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
  		}
  		break;
 8000880:	e080      	b.n	8000984 <main+0x2bc>
  	case 1: // Client has been connected
  		// Check for status
  		if(serverStatus == SOCK_CLOSE_WAIT){
 8000882:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000886:	2b1c      	cmp	r3, #28
 8000888:	d10e      	bne.n	80008a8 <main+0x1e0>
  			// Reinit the connection
  			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4845      	ldr	r0, [pc, #276]	; (80009a4 <main+0x2dc>)
 8000890:	f002 fb96 	bl	8002fc0 <HAL_GPIO_WritePin>
  			// Close the socket
  			close(mySocket);
 8000894:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fa1f 	bl	8000cdc <close>
  			state++;
 800089e:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80008a2:	3301      	adds	r3, #1
 80008a4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
  		}

  		// Check for incoming data
  		uint8_t intSocketRegister = getSn_IR(mySocket);
 80008a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	3301      	adds	r3, #1
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fea0 	bl	80015fc <WIZCHIP_READ>
 80008bc:	4603      	mov	r3, r0
 80008be:	f003 031f 	and.w	r3, r3, #31
 80008c2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
  		// Check for socket 1 RECV interrupt
  		if(intSocketRegister & (1<<2)){
 80008c6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d05a      	beq.n	8000988 <main+0x2c0>
  			// Interrupt occurred
  			dataSize = recv(mySocket, rxBuff, 50);
 80008d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008da:	2232      	movs	r2, #50	; 0x32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fbbf 	bl	8001060 <recv>
 80008e2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

  			if(dataSize <= 0){
 80008e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd4e      	ble.n	800098c <main+0x2c4>
  				// Error
  				break;
  			}

  			memcpy(txBuff, rxBuff, dataSize);
 80008ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80008f2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 f828 	bl	8004950 <memcpy>
  			if(send(mySocket, txBuff, dataSize) != dataSize){
 8000900:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f107 0108 	add.w	r1, r7, #8
 800090a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800090e:	4618      	mov	r0, r3
 8000910:	f000 faac 	bl	8000e6c <send>
 8000914:	4602      	mov	r2, r0
 8000916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800091a:	4293      	cmp	r3, r2
 800091c:	d138      	bne.n	8000990 <main+0x2c8>
  				// Something went wrong
  			  break;
  			}

  			// Clear interrupt register
  			intSocketRegister &= (1<<2);
 800091e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
  			setSn_IR(mySocket, intSocketRegister);
 800092a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	3301      	adds	r3, #1
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000938:	461a      	mov	r2, r3
 800093a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800093e:	f003 031f 	and.w	r3, r3, #31
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	4610      	mov	r0, r2
 8000948:	f000 fea4 	bl	8001694 <WIZCHIP_WRITE>
  		}

  		break;
 800094c:	e01c      	b.n	8000988 <main+0x2c0>
  	case 2:
  		// Reinit the socket
  		mySocket = socket(1, Sn_MR_TCP, 502, 0);
 800094e:	2300      	movs	r3, #0
 8000950:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000954:	2101      	movs	r1, #1
 8000956:	2001      	movs	r0, #1
 8000958:	f000 f8aa 	bl	8000ab0 <socket>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  		if(mySocket != 1){
 8000962:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000966:	2b01      	cmp	r3, #1
 8000968:	d000      	beq.n	800096c <main+0x2a4>
  		  // Error in socket creation
  		  while(1);
 800096a:	e7fe      	b.n	800096a <main+0x2a2>
  		}

  		// Listen socket for connections
  		err_t = listen(mySocket);
 800096c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fa21 	bl	8000db8 <listen>
 8000976:	4603      	mov	r3, r0
 8000978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  		state = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

  		break;
 8000982:	e006      	b.n	8000992 <main+0x2ca>
  		break;
 8000984:	bf00      	nop
 8000986:	e004      	b.n	8000992 <main+0x2ca>
  		break;
 8000988:	bf00      	nop
 800098a:	e002      	b.n	8000992 <main+0x2ca>
  				break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <main+0x2ca>
  			  break;
 8000990:	bf00      	nop
  	}

  	HAL_IWDG_Refresh(&hiwdg);
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <main+0x300>)
 8000994:	f002 fb6f 	bl	8003076 <HAL_IWDG_Refresh>
  	serverStatus = getSn_SR(mySocket);
 8000998:	e71d      	b.n	80007d6 <main+0x10e>
 800099a:	bf00      	nop
 800099c:	08005a00 	.word	0x08005a00
 80009a0:	08005a10 	.word	0x08005a10
 80009a4:	40020000 	.word	0x40020000
 80009a8:	080026b9 	.word	0x080026b9
 80009ac:	080026a1 	.word	0x080026a1
 80009b0:	080026f1 	.word	0x080026f1
 80009b4:	080026d1 	.word	0x080026d1
 80009b8:	08002739 	.word	0x08002739
 80009bc:	08002715 	.word	0x08002715
 80009c0:	080059d0 	.word	0x080059d0
 80009c4:	080059e8 	.word	0x080059e8
 80009c8:	200000ec 	.word	0x200000ec

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 ffc6 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <SystemClock_Config+0xd0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <SystemClock_Config+0xd0>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <SystemClock_Config+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <SystemClock_Config+0xd4>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a40:	2310      	movs	r3, #16
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fb1e 	bl	8003098 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a62:	f000 f81f 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fd80 	bl	8003588 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a8e:	f000 f809 	bl	8000aa4 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71bb      	strb	r3, [r7, #6]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d902      	bls.n	8000ada <socket+0x2a>
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	e0f2      	b.n	8000cc0 <socket+0x210>
	switch(protocol)
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <socket+0x3c>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dd11      	ble.n	8000b08 <socket+0x58>
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d80e      	bhi.n	8000b08 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000aea:	e011      	b.n	8000b10 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2204      	movs	r2, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000af8:	f000 fe1a 	bl	8001730 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d105      	bne.n	8000b0e <socket+0x5e>
 8000b02:	f06f 0302 	mvn.w	r3, #2
 8000b06:	e0db      	b.n	8000cc0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000b08:	f06f 0304 	mvn.w	r3, #4
 8000b0c:	e0d8      	b.n	8000cc0 <socket+0x210>
	    break;
 8000b0e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <socket+0x70>
 8000b1a:	f06f 0305 	mvn.w	r3, #5
 8000b1e:	e0cf      	b.n	8000cc0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d025      	beq.n	8000b72 <socket+0xc2>
	{
   	switch(protocol)
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d002      	beq.n	8000b32 <socket+0x82>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d008      	beq.n	8000b42 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000b30:	e024      	b.n	8000b7c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11c      	bne.n	8000b76 <socket+0xc6>
 8000b3c:	f06f 0305 	mvn.w	r3, #5
 8000b40:	e0be      	b.n	8000cc0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db02      	blt.n	8000b5a <socket+0xaa>
 8000b54:	f06f 0305 	mvn.w	r3, #5
 8000b58:	e0b2      	b.n	8000cc0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db06      	blt.n	8000b7a <socket+0xca>
 8000b6c:	f06f 0305 	mvn.w	r3, #5
 8000b70:	e0a6      	b.n	8000cc0 <socket+0x210>
   	}
   }
 8000b72:	bf00      	nop
 8000b74:	e002      	b.n	8000b7c <socket+0xcc>
   	      break;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <socket+0xcc>
   	      break;
 8000b7a:	bf00      	nop
	close(sn);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f8ac 	bl	8000cdc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	3301      	adds	r3, #1
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b92:	f023 030f 	bic.w	r3, r3, #15
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f000 fd76 	bl	8001694 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d110      	bne.n	8000bd0 <socket+0x120>
	{
	   port = sock_any_port++;
 8000bae:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <socket+0x218>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	b291      	uxth	r1, r2
 8000bb6:	4a44      	ldr	r2, [pc, #272]	; (8000cc8 <socket+0x218>)
 8000bb8:	8011      	strh	r1, [r2, #0]
 8000bba:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000bbc:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <socket+0x218>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d103      	bne.n	8000bd0 <socket+0x120>
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <socket+0x218>)
 8000bca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000bce:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bdc:	461a      	mov	r2, r3
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f000 fd53 	bl	8001694 <WIZCHIP_WRITE>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f000 fd46 	bl	8001694 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fd3c 	bl	8001694 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c1c:	bf00      	nop
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	3301      	adds	r3, #1
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fce6 	bl	80015fc <WIZCHIP_READ>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f3      	bne.n	8000c1e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <socket+0x21c>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <socket+0x21c>)
 8000c52:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 0201 	and.w	r2, r3, #1
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <socket+0x21c>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <socket+0x21c>)
 8000c70:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2201      	movs	r2, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <socket+0x220>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4013      	ands	r3, r2
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <socket+0x220>)
 8000c8e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <socket+0x224>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <socket+0x228>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000ca2:	bf00      	nop
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	3301      	adds	r3, #1
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fca3 	bl	80015fc <WIZCHIP_READ>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f3      	beq.n	8000ca4 <socket+0x1f4>
   return (int8_t)sn;
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	200000bc 	.word	0x200000bc
 8000cd0:	200000be 	.word	0x200000be
 8000cd4:	200000c0 	.word	0x200000c0
 8000cd8:	200000d0 	.word	0x200000d0

08000cdc <close>:

int8_t close(uint8_t sn)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d902      	bls.n	8000cf2 <close+0x16>
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	e055      	b.n	8000d9e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cfe:	2110      	movs	r1, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fcc7 	bl	8001694 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000d06:	bf00      	nop
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fc71 	bl	80015fc <WIZCHIP_READ>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f3      	bne.n	8000d08 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	3301      	adds	r3, #1
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d2c:	211f      	movs	r1, #31
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fcb0 	bl	8001694 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2201      	movs	r2, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <close+0xcc>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <close+0xcc>)
 8000d50:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2201      	movs	r2, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <close+0xd0>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <close+0xd0>)
 8000d6e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <close+0xd4>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <close+0xd8>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000d82:	bf00      	nop
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	3301      	adds	r3, #1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fc33 	bl	80015fc <WIZCHIP_READ>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f3      	bne.n	8000d84 <close+0xa8>
	return SOCK_OK;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000bc 	.word	0x200000bc
 8000dac:	200000be 	.word	0x200000be
 8000db0:	200000c0 	.word	0x200000c0
 8000db4:	200000d0 	.word	0x200000d0

08000db8 <listen>:

int8_t listen(uint8_t sn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d902      	bls.n	8000dce <listen+0x16>
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	e049      	b.n	8000e62 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fc10 	bl	80015fc <WIZCHIP_READ>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d002      	beq.n	8000dec <listen+0x34>
 8000de6:	f06f 0304 	mvn.w	r3, #4
 8000dea:	e03a      	b.n	8000e62 <listen+0xaa>
	CHECK_SOCKINIT();
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	3301      	adds	r3, #1
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fbff 	bl	80015fc <WIZCHIP_READ>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b13      	cmp	r3, #19
 8000e02:	d002      	beq.n	8000e0a <listen+0x52>
 8000e04:	f06f 0302 	mvn.w	r3, #2
 8000e08:	e02b      	b.n	8000e62 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	3301      	adds	r3, #1
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e16:	2102      	movs	r1, #2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fc3b 	bl	8001694 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000e1e:	bf00      	nop
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	3301      	adds	r3, #1
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fbe5 	bl	80015fc <WIZCHIP_READ>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f3      	bne.n	8000e20 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000e38:	e006      	b.n	8000e48 <listen+0x90>
   {
         close(sn);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff4d 	bl	8000cdc <close>
         return SOCKERR_SOCKCLOSED;
 8000e42:	f06f 0303 	mvn.w	r3, #3
 8000e46:	e00c      	b.n	8000e62 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fbd1 	bl	80015fc <WIZCHIP_READ>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b14      	cmp	r3, #20
 8000e5e:	d1ec      	bne.n	8000e3a <listen+0x82>
   }
   return SOCK_OK;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d902      	bls.n	8000e90 <send+0x24>
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e0de      	b.n	800104e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	3301      	adds	r3, #1
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fbaf 	bl	80015fc <WIZCHIP_READ>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d002      	beq.n	8000eae <send+0x42>
 8000ea8:	f06f 0304 	mvn.w	r3, #4
 8000eac:	e0cf      	b.n	800104e <send+0x1e2>
   CHECK_SOCKDATA();
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <send+0x4e>
 8000eb4:	f06f 030d 	mvn.w	r3, #13
 8000eb8:	e0c9      	b.n	800104e <send+0x1e2>
   tmp = getSn_SR(sn);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fb98 	bl	80015fc <WIZCHIP_READ>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	2b17      	cmp	r3, #23
 8000ed4:	d005      	beq.n	8000ee2 <send+0x76>
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	2b1c      	cmp	r3, #28
 8000eda:	d002      	beq.n	8000ee2 <send+0x76>
 8000edc:	f06f 0306 	mvn.w	r3, #6
 8000ee0:	e0b5      	b.n	800104e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <send+0x1ec>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	fa42 f303 	asr.w	r3, r2, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d039      	beq.n	8000f6a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	3301      	adds	r3, #1
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fb7a 	bl	80015fc <WIZCHIP_READ>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d019      	beq.n	8000f4e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	3301      	adds	r3, #1
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f26:	2110      	movs	r1, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fbb3 	bl	8001694 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b46      	ldr	r3, [pc, #280]	; (8001058 <send+0x1ec>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4013      	ands	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b43      	ldr	r3, [pc, #268]	; (8001058 <send+0x1ec>)
 8000f4a:	801a      	strh	r2, [r3, #0]
 8000f4c:	e00d      	b.n	8000f6a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <send+0xfa>
      {
         close(sn);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff febe 	bl	8000cdc <close>
         return SOCKERR_TIMEOUT;
 8000f60:	f06f 030c 	mvn.w	r3, #12
 8000f64:	e073      	b.n	800104e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e071      	b.n	800104e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3301      	adds	r3, #1
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fb40 	bl	80015fc <WIZCHIP_READ>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	89bb      	ldrh	r3, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d901      	bls.n	8000f90 <send+0x124>
 8000f8c:	89bb      	ldrh	r3, [r7, #12]
 8000f8e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fc8c 	bl	80018b0 <getSn_TX_FSR>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb27 	bl	80015fc <WIZCHIP_READ>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b17      	cmp	r3, #23
 8000fb6:	d009      	beq.n	8000fcc <send+0x160>
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b1c      	cmp	r3, #28
 8000fbc:	d006      	beq.n	8000fcc <send+0x160>
      {
         close(sn);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe8b 	bl	8000cdc <close>
         return SOCKERR_SOCKSTATUS;
 8000fc6:	f06f 0306 	mvn.w	r3, #6
 8000fca:	e040      	b.n	800104e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <send+0x1f0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	fa42 f303 	asr.w	r3, r2, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <send+0x180>
 8000fe0:	88ba      	ldrh	r2, [r7, #4]
 8000fe2:	89bb      	ldrh	r3, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d901      	bls.n	8000fec <send+0x180>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e030      	b.n	800104e <send+0x1e2>
      if(len <= freesize) break;
 8000fec:	88ba      	ldrh	r2, [r7, #4]
 8000fee:	89bb      	ldrh	r3, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d900      	bls.n	8000ff6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000ff4:	e7cc      	b.n	8000f90 <send+0x124>
      if(len <= freesize) break;
 8000ff6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000ff8:	88ba      	ldrh	r2, [r7, #4]
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fcec 	bl	80019dc <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001010:	2120      	movs	r1, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fb3e 	bl	8001694 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001018:	bf00      	nop
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	3301      	adds	r3, #1
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fae8 	bl	80015fc <WIZCHIP_READ>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f3      	bne.n	800101a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2201      	movs	r2, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <send+0x1ec>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <send+0x1ec>)
 800104a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800104c:	88bb      	ldrh	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000be 	.word	0x200000be
 800105c:	200000bc 	.word	0x200000bc

08001060 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b08      	cmp	r3, #8
 800107c:	d902      	bls.n	8001084 <recv+0x24>
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e09c      	b.n	80011be <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	3301      	adds	r3, #1
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fab5 	bl	80015fc <WIZCHIP_READ>
 8001092:	4603      	mov	r3, r0
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	2b01      	cmp	r3, #1
 800109a:	d002      	beq.n	80010a2 <recv+0x42>
 800109c:	f06f 0304 	mvn.w	r3, #4
 80010a0:	e08d      	b.n	80011be <recv+0x15e>
   CHECK_SOCKDATA();
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <recv+0x4e>
 80010a8:	f06f 030d 	mvn.w	r3, #13
 80010ac:	e087      	b.n	80011be <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	3301      	adds	r3, #1
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fa9e 	bl	80015fc <WIZCHIP_READ>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	029b      	lsls	r3, r3, #10
 80010c6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80010c8:	89ba      	ldrh	r2, [r7, #12]
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d201      	bcs.n	80010d4 <recv+0x74>
 80010d0:	89bb      	ldrh	r3, [r7, #12]
 80010d2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fc35 	bl	8001946 <getSn_RX_RSR>
 80010dc:	4603      	mov	r3, r0
 80010de:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	3301      	adds	r3, #1
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fa85 	bl	80015fc <WIZCHIP_READ>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b17      	cmp	r3, #23
 80010fa:	d026      	beq.n	800114a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b1c      	cmp	r3, #28
 8001100:	d11c      	bne.n	800113c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d133      	bne.n	8001170 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fbd0 	bl	80018b0 <getSn_TX_FSR>
 8001110:	4603      	mov	r3, r0
 8001112:	461c      	mov	r4, r3
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	3301      	adds	r3, #1
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fa6b 	bl	80015fc <WIZCHIP_READ>
 8001126:	4603      	mov	r3, r0
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	429c      	cmp	r4, r3
 800112c:	d10d      	bne.n	800114a <recv+0xea>
               {
                  close(sn);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fdd3 	bl	8000cdc <close>
                  return SOCKERR_SOCKSTATUS;
 8001136:	f06f 0306 	mvn.w	r3, #6
 800113a:	e040      	b.n	80011be <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fdcc 	bl	8000cdc <close>
               return SOCKERR_SOCKSTATUS;
 8001144:	f06f 0306 	mvn.w	r3, #6
 8001148:	e039      	b.n	80011be <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <recv+0x168>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	fa42 f303 	asr.w	r3, r2, r3
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <recv+0x108>
 800115e:	89bb      	ldrh	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <recv+0x108>
 8001164:	2300      	movs	r3, #0
 8001166:	e02a      	b.n	80011be <recv+0x15e>
         if(recvsize != 0) break;
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800116e:	e7b1      	b.n	80010d4 <recv+0x74>
               if(recvsize != 0) break;
 8001170:	bf00      	nop
 8001172:	e000      	b.n	8001176 <recv+0x116>
         if(recvsize != 0) break;
 8001174:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001176:	89ba      	ldrh	r2, [r7, #12]
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d201      	bcs.n	8001182 <recv+0x122>
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001182:	88ba      	ldrh	r2, [r7, #4]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fc83 	bl	8001a94 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	3301      	adds	r3, #1
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fa79 	bl	8001694 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80011a2:	bf00      	nop
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	3301      	adds	r3, #1
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fa23 	bl	80015fc <WIZCHIP_READ>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f3      	bne.n	80011a4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80011bc:	88bb      	ldrh	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000bc 	.word	0x200000bc

080011cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI2_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <MX_SPI2_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI2_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI2_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI2_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI2_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI2_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI2_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI2_Init+0x64>)
 8001200:	2208      	movs	r2, #8
 8001202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI2_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI2_Init+0x64>)
 800121e:	f002 fbaf 	bl	8003980 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001228:	f7ff fc3c 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000f8 	.word	0x200000f8
 8001234:	40003800 	.word	0x40003800

08001238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <HAL_SPI_MspInit+0xc0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d14a      	bne.n	80012f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_SPI_MspInit+0xc4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012be:	2305      	movs	r3, #5
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <HAL_SPI_MspInit+0xc8>)
 80012ca:	f001 fcf5 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <HAL_SPI_MspInit+0xcc>)
 80012ec:	f001 fce4 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40003800 	.word	0x40003800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001346:	2007      	movs	r0, #7
 8001348:	f001 fc82 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f001 fb5e 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
	}

return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
	}
	return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f003 fa20 	bl	80048fc <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200000d8 	.word	0x200000d8
 80014f0:	200001a8 	.word	0x200001a8

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f002 ffbe 	bl	80044d0 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f7ff faa3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000150 	.word	0x20000150
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x84>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12b      	bne.n	80015e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x8c>)
 80015e2:	f001 fb69 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <WIZCHIP_READ+0x94>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4798      	blx	r3
   WIZCHIP.CS._select();
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <WIZCHIP_READ+0x94>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <WIZCHIP_READ+0x94>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <WIZCHIP_READ+0x24>
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <WIZCHIP_READ+0x94>)
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d114      	bne.n	800164a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <WIZCHIP_READ+0x94>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	0c12      	lsrs	r2, r2, #16
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	4610      	mov	r0, r2
 800162c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <WIZCHIP_READ+0x94>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	0a12      	lsrs	r2, r2, #8
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	4610      	mov	r0, r2
 800163a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <WIZCHIP_READ+0x94>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	4610      	mov	r0, r2
 8001646:	4798      	blx	r3
 8001648:	e011      	b.n	800166e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0c1b      	lsrs	r3, r3, #16
 800164e:	b2db      	uxtb	r3, r3
 8001650:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	b2db      	uxtb	r3, r3
 8001658:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <WIZCHIP_READ+0x94>)
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f107 020c 	add.w	r2, r7, #12
 8001668:	2103      	movs	r1, #3
 800166a:	4610      	mov	r0, r2
 800166c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <WIZCHIP_READ+0x94>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <WIZCHIP_READ+0x94>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <WIZCHIP_READ+0x94>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	4798      	blx	r3
   return ret;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008

08001694 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d119      	bne.n	80016f0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	0c12      	lsrs	r2, r2, #16
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	4610      	mov	r0, r2
 80016c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	0a12      	lsrs	r2, r2, #8
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	4610      	mov	r0, r2
 80016d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	4610      	mov	r0, r2
 80016e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <WIZCHIP_WRITE+0x98>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
 80016ee:	e013      	b.n	8001718 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <WIZCHIP_WRITE+0x98>)
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	2104      	movs	r1, #4
 8001714:	4610      	mov	r0, r2
 8001716:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <WIZCHIP_WRITE+0x98>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <WIZCHIP_WRITE+0x98>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	4798      	blx	r3
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008

08001730 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <WIZCHIP_READ_BUF+0x2a>
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	2b00      	cmp	r3, #0
 8001758:	d126      	bne.n	80017a8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	0c12      	lsrs	r2, r2, #16
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	4610      	mov	r0, r2
 8001766:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	0a12      	lsrs	r2, r2, #8
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	4610      	mov	r0, r2
 8001774:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	4610      	mov	r0, r2
 8001780:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	82fb      	strh	r3, [r7, #22]
 8001786:	e00a      	b.n	800179e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	8afa      	ldrh	r2, [r7, #22]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	188c      	adds	r4, r1, r2
 8001792:	4798      	blx	r3
 8001794:	4603      	mov	r3, r0
 8001796:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001798:	8afb      	ldrh	r3, [r7, #22]
 800179a:	3301      	adds	r3, #1
 800179c:	82fb      	strh	r3, [r7, #22]
 800179e:	8afa      	ldrh	r2, [r7, #22]
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3f0      	bcc.n	8001788 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017a6:	e017      	b.n	80017d8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f107 0210 	add.w	r2, r7, #16
 80017c6:	2103      	movs	r1, #3
 80017c8:	4610      	mov	r0, r2
 80017ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	4611      	mov	r1, r2
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80017de:	4b03      	ldr	r3, [pc, #12]	; (80017ec <WIZCHIP_READ_BUF+0xbc>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4798      	blx	r3
}
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	20000008 	.word	0x20000008

080017f0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	4613      	mov	r3, r2
 80017fc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b00      	cmp	r3, #0
 8001818:	d126      	bne.n	8001868 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	0c12      	lsrs	r2, r2, #16
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	4610      	mov	r0, r2
 8001826:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	0a12      	lsrs	r2, r2, #8
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	4610      	mov	r0, r2
 8001834:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	4610      	mov	r0, r2
 8001840:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	82fb      	strh	r3, [r7, #22]
 8001846:	e00a      	b.n	800185e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	8afa      	ldrh	r2, [r7, #22]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	440a      	add	r2, r1
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	4610      	mov	r0, r2
 8001856:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	3301      	adds	r3, #1
 800185c:	82fb      	strh	r3, [r7, #22]
 800185e:	8afa      	ldrh	r2, [r7, #22]
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f0      	bcc.n	8001848 <WIZCHIP_WRITE_BUF+0x58>
 8001866:	e017      	b.n	8001898 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	b2db      	uxtb	r3, r3
 800186e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b2db      	uxtb	r3, r3
 8001876:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	2103      	movs	r1, #3
 8001888:	4610      	mov	r0, r2
 800188a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	88fa      	ldrh	r2, [r7, #6]
 8001892:	4611      	mov	r1, r2
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <WIZCHIP_WRITE_BUF+0xbc>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4798      	blx	r3
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008

080018b0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	81fb      	strh	r3, [r7, #14]
 80018be:	2300      	movs	r3, #0
 80018c0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	3301      	adds	r3, #1
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fe94 	bl	80015fc <WIZCHIP_READ>
 80018d4:	4603      	mov	r3, r0
 80018d6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80018d8:	89bb      	ldrh	r3, [r7, #12]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b29c      	uxth	r4, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	3301      	adds	r3, #1
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe86 	bl	80015fc <WIZCHIP_READ>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4423      	add	r3, r4
 80018f6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80018f8:	89bb      	ldrh	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01a      	beq.n	8001934 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3301      	adds	r3, #1
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe76 	bl	80015fc <WIZCHIP_READ>
 8001910:	4603      	mov	r3, r0
 8001912:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b29c      	uxth	r4, r3
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3301      	adds	r3, #1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe68 	bl	80015fc <WIZCHIP_READ>
 800192c:	4603      	mov	r3, r0
 800192e:	b29b      	uxth	r3, r3
 8001930:	4423      	add	r3, r4
 8001932:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001934:	89fa      	ldrh	r2, [r7, #14]
 8001936:	89bb      	ldrh	r3, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d1c2      	bne.n	80018c2 <getSn_TX_FSR+0x12>
   return val;
 800193c:	89fb      	ldrh	r3, [r7, #14]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}

08001946 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001946:	b590      	push	{r4, r7, lr}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001950:	2300      	movs	r3, #0
 8001952:	81fb      	strh	r3, [r7, #14]
 8001954:	2300      	movs	r3, #0
 8001956:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	3301      	adds	r3, #1
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe49 	bl	80015fc <WIZCHIP_READ>
 800196a:	4603      	mov	r3, r0
 800196c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800196e:	89bb      	ldrh	r3, [r7, #12]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b29c      	uxth	r4, r3
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	3301      	adds	r3, #1
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe3b 	bl	80015fc <WIZCHIP_READ>
 8001986:	4603      	mov	r3, r0
 8001988:	b29b      	uxth	r3, r3
 800198a:	4423      	add	r3, r4
 800198c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800198e:	89bb      	ldrh	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01a      	beq.n	80019ca <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3301      	adds	r3, #1
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe2b 	bl	80015fc <WIZCHIP_READ>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b29c      	uxth	r4, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe1d 	bl	80015fc <WIZCHIP_READ>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4423      	add	r3, r4
 80019c8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	89bb      	ldrh	r3, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d1c2      	bne.n	8001958 <getSn_RX_RSR+0x12>
   return val;
 80019d2:	89fb      	ldrh	r3, [r7, #14]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d048      	beq.n	8001a8c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	3301      	adds	r3, #1
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fdf8 	bl	80015fc <WIZCHIP_READ>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b29c      	uxth	r4, r3
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	3301      	adds	r3, #1
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fdeb 	bl	80015fc <WIZCHIP_READ>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4423      	add	r3, r4
 8001a2c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	3202      	adds	r2, #2
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	68b8      	ldr	r0, [r7, #8]
 8001a46:	f7ff fed3 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001a4a:	89fa      	ldrh	r2, [r7, #14]
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	3301      	adds	r3, #1
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001a5e:	461a      	mov	r2, r3
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff fe12 	bl	8001694 <WIZCHIP_WRITE>
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	3301      	adds	r3, #1
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff fe05 	bl	8001694 <WIZCHIP_WRITE>
 8001a8a:	e000      	b.n	8001a8e <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001a8c:	bf00      	nop
}
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001aac:	88bb      	ldrh	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d048      	beq.n	8001b44 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd9c 	bl	80015fc <WIZCHIP_READ>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	b29c      	uxth	r4, r3
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fd8f 	bl	80015fc <WIZCHIP_READ>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4423      	add	r3, r4
 8001ae4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	3203      	adds	r2, #3
 8001af0:	00d2      	lsls	r2, r2, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f7ff fe17 	bl	8001730 <WIZCHIP_READ_BUF>
   ptr += len;
 8001b02:	89fa      	ldrh	r2, [r7, #14]
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b16:	461a      	mov	r2, r3
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f7ff fdb6 	bl	8001694 <WIZCHIP_WRITE>
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001b34:	461a      	mov	r2, r3
 8001b36:	89fb      	ldrh	r3, [r7, #14]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff fda9 	bl	8001694 <WIZCHIP_WRITE>
 8001b42:	e000      	b.n	8001b46 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001b44:	bf00      	nop
}
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <reg_wizchip_cs_cbfunc+0x16>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <reg_wizchip_cs_cbfunc+0x40>)
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <reg_wizchip_cs_cbfunc+0x44>)
 8001c2e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <reg_wizchip_cs_cbfunc+0x40>)
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <reg_wizchip_cs_cbfunc+0x48>)
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e006      	b.n	8001c46 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <reg_wizchip_cs_cbfunc+0x40>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <reg_wizchip_cs_cbfunc+0x40>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6193      	str	r3, [r2, #24]
   }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	08001b69 	.word	0x08001b69
 8001c5c:	08001b77 	.word	0x08001b77

08001c60 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001c6a:	bf00      	nop
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <reg_wizchip_spi_cbfunc+0x4c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f9      	beq.n	8001c6c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <reg_wizchip_spi_cbfunc+0x24>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <reg_wizchip_spi_cbfunc+0x4c>)
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <reg_wizchip_spi_cbfunc+0x50>)
 8001c88:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <reg_wizchip_spi_cbfunc+0x4c>)
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <reg_wizchip_spi_cbfunc+0x54>)
 8001c8e:	621a      	str	r2, [r3, #32]
 8001c90:	e006      	b.n	8001ca0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <reg_wizchip_spi_cbfunc+0x4c>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <reg_wizchip_spi_cbfunc+0x4c>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6213      	str	r3, [r2, #32]
   }
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	08001bbd 	.word	0x08001bbd
 8001cb4:	08001bcd 	.word	0x08001bcd

08001cb8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001cc2:	bf00      	nop
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f9      	beq.n	8001cc4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <reg_wizchip_spiburst_cbfunc+0x24>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <reg_wizchip_spiburst_cbfunc+0x54>)
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce8:	e006      	b.n	8001cf8 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20000008 	.word	0x20000008
 8001d08:	08001be3 	.word	0x08001be3
 8001d0c:	08001bfb 	.word	0x08001bfb

08001d10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f200 80c7 	bhi.w	8001ebe <ctlwizchip+0x1ae>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <ctlwizchip+0x28>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d79 	.word	0x08001d79
 8001d3c:	08001d7f 	.word	0x08001d7f
 8001d40:	08001dab 	.word	0x08001dab
 8001d44:	08001d9f 	.word	0x08001d9f
 8001d48:	08001db9 	.word	0x08001db9
 8001d4c:	08001dc5 	.word	0x08001dc5
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001df9 	.word	0x08001df9
 8001d58:	08001e1f 	.word	0x08001e1f
 8001d5c:	08001e63 	.word	0x08001e63
 8001d60:	08001e69 	.word	0x08001e69
 8001d64:	08001e71 	.word	0x08001e71
 8001d68:	08001ec5 	.word	0x08001ec5
 8001d6c:	08001e79 	.word	0x08001e79
 8001d70:	08001e87 	.word	0x08001e87
 8001d74:	08001ea3 	.word	0x08001ea3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001d78:	f000 f8ea 	bl	8001f50 <wizchip_sw_reset>
         break;
 8001d7c:	e0a3      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f927 	bl	8001fe8 <wizchip_init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	e094      	b.n	8001ec8 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f9ac 	bl	8002100 <wizchip_clrinterrupt>
         break;
 8001da8:	e08d      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001daa:	f000 f9dd 	bl	8002168 <wizchip_getinterrupt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	801a      	strh	r2, [r3, #0]
         break;
 8001db6:	e086      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f9f8 	bl	80021b2 <wizchip_setinterruptmask>
         break;         
 8001dc2:	e080      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001dc4:	f000 fa10 	bl	80021e8 <wizchip_getinterruptmask>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	801a      	strh	r2, [r3, #0]
         break;
 8001dd0:	e079      	b.n	8001ec6 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001de2:	f7ff fc57 	bl	8001694 <WIZCHIP_WRITE>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001df2:	f7ff fc4f 	bl	8001694 <WIZCHIP_WRITE>
         break;
 8001df6:	e066      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001df8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001dfc:	f7ff fbfe 	bl	80015fc <WIZCHIP_READ>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b29c      	uxth	r4, r3
 8001e08:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e0c:	f7ff fbf6 	bl	80015fc <WIZCHIP_READ>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4423      	add	r3, r4
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	801a      	strh	r2, [r3, #0]
         break;
 8001e1c:	e053      	b.n	8001ec6 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e20:	789a      	ldrb	r2, [r3, #2]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e2c:	78d2      	ldrb	r2, [r2, #3]
 8001e2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3302      	adds	r3, #2
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e36:	7912      	ldrb	r2, [r2, #4]
 8001e38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e40:	7952      	ldrb	r2, [r2, #5]
 8001e42:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3304      	adds	r3, #4
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e4a:	7992      	ldrb	r2, [r2, #6]
 8001e4c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	3305      	adds	r3, #5
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <ctlwizchip+0x1c0>)
 8001e54:	79d2      	ldrb	r2, [r2, #7]
 8001e56:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3306      	adds	r3, #6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
         break;
 8001e60:	e031      	b.n	8001ec6 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001e62:	f000 fa13 	bl	800228c <wizphy_reset>
         break;
 8001e66:	e02e      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f000 fa36 	bl	80022da <wizphy_setphyconf>
         break;
 8001e6e:	e02a      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f000 fa74 	bl	800235e <wizphy_getphyconf>
         break;
 8001e76:	e026      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fad7 	bl	8002430 <wizphy_setphypmode>
 8001e82:	4603      	mov	r3, r0
 8001e84:	e020      	b.n	8001ec8 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001e86:	f000 f9e8 	bl	800225a <wizphy_getphypmode>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2bff      	cmp	r3, #255	; 0xff
 8001e92:	d102      	bne.n	8001e9a <ctlwizchip+0x18a>
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	e016      	b.n	8001ec8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7dfa      	ldrb	r2, [r7, #23]
 8001e9e:	701a      	strb	r2, [r3, #0]
         break;
 8001ea0:	e011      	b.n	8001ec6 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001ea2:	f000 f9c4 	bl	800222e <wizphy_getphylink>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	d102      	bne.n	8001eb6 <ctlwizchip+0x1a6>
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e008      	b.n	8001ec8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	7dfa      	ldrb	r2, [r7, #23]
 8001eba:	701a      	strb	r2, [r3, #0]
         break;
 8001ebc:	e003      	b.n	8001ec6 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e001      	b.n	8001ec8 <ctlwizchip+0x1b8>
         break;
 8001ec4:	bf00      	nop
   }
   return 0;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d82c      	bhi.n	8001f40 <ctlnetwork+0x6c>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <ctlnetwork+0x18>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f05 	.word	0x08001f05
 8001ef0:	08001f0d 	.word	0x08001f0d
 8001ef4:	08001f15 	.word	0x08001f15
 8001ef8:	08001f23 	.word	0x08001f23
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001f39 	.word	0x08001f39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f000 fadd 	bl	80024c4 <wizchip_setnetinfo>
         break;
 8001f0a:	e01c      	b.n	8001f46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001f0c:	6838      	ldr	r0, [r7, #0]
 8001f0e:	f000 fb19 	bl	8002544 <wizchip_getnetinfo>
         break;
 8001f12:	e018      	b.n	8001f46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fb53 	bl	80025c4 <wizchip_setnetmode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	e012      	b.n	8001f48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001f22:	f000 fb71 	bl	8002608 <wizchip_getnetmode>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
         break;
 8001f2e:	e00a      	b.n	8001f46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f000 fb71 	bl	8002618 <wizchip_settimeout>
         break;
 8001f36:	e006      	b.n	8001f46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f000 fb8e 	bl	800265a <wizchip_gettimeout>
         break;
 8001f3e:	e002      	b.n	8001f46 <ctlnetwork+0x72>
      default:
         return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	e000      	b.n	8001f48 <ctlnetwork+0x74>
   }
   return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2206      	movs	r2, #6
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f60:	f7ff fbe6 	bl	8001730 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f70:	f7ff fbde 	bl	8001730 <WIZCHIP_READ_BUF>
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f80:	f7ff fbd6 	bl	8001730 <WIZCHIP_READ_BUF>
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f90:	f7ff fbce 	bl	8001730 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fb7c 	bl	8001694 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fb2d 	bl	80015fc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2206      	movs	r2, #6
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001fac:	f7ff fc20 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fbc:	f7ff fc18 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fcc:	f7ff fc10 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fdc:	f7ff fc08 	bl	80017f0 <WIZCHIP_WRITE_BUF>
}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001ff6:	f7ff ffab 	bl	8001f50 <wizchip_sw_reset>
   if(txsize)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03b      	beq.n	8002078 <wizchip_init+0x90>
   {
      tmp = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e015      	b.n	8002036 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	4413      	add	r3, r2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800201c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002020:	2b10      	cmp	r3, #16
 8002022:	dd02      	ble.n	800202a <wizchip_init+0x42>
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	e066      	b.n	80020f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	2b07      	cmp	r3, #7
 800203c:	dde5      	ble.n	800200a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	e015      	b.n	8002070 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3301      	adds	r3, #1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002052:	4618      	mov	r0, r3
 8002054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff fb18 	bl	8001694 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002074:	2b07      	cmp	r3, #7
 8002076:	dde5      	ble.n	8002044 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03b      	beq.n	80020f6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e015      	b.n	80020b4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	7bbb      	ldrb	r3, [r7, #14]
 8002094:	4413      	add	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800209a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	dd02      	ble.n	80020a8 <wizchip_init+0xc0>
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e027      	b.n	80020f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80020a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b8:	2b07      	cmp	r3, #7
 80020ba:	dde5      	ble.n	8002088 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e015      	b.n	80020ee <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3301      	adds	r3, #1
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80020d0:	4618      	mov	r0, r3
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f7ff fad9 	bl	8001694 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	2b07      	cmp	r3, #7
 80020f4:	dde5      	ble.n	80020c2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002124:	f7ff fab6 	bl	8001694 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e014      	b.n	8002158 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800212e:	7bba      	ldrb	r2, [r7, #14]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	fa42 f303 	asr.w	r3, r2, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <wizchip_clrinterrupt+0x52>
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3301      	adds	r3, #1
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800214a:	211f      	movs	r1, #31
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff faa1 	bl	8001694 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b07      	cmp	r3, #7
 800215c:	d9e7      	bls.n	800212e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800217a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800217e:	f7ff fa3d 	bl	80015fc <WIZCHIP_READ>
 8002182:	4603      	mov	r3, r0
 8002184:	f023 030f 	bic.w	r3, r3, #15
 8002188:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800218a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800218e:	f7ff fa35 	bl	80015fc <WIZCHIP_READ>
 8002192:	4603      	mov	r3, r0
 8002194:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b29a      	uxth	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80021a8:	88bb      	ldrh	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	4619      	mov	r1, r3
 80021cc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80021d0:	f7ff fa60 	bl	8001694 <WIZCHIP_WRITE>
   setSIMR(simr);
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80021dc:	f7ff fa5a 	bl	8001694 <WIZCHIP_WRITE>
#endif   
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80021fa:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80021fe:	f7ff f9fd 	bl	80015fc <WIZCHIP_READ>
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002206:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800220a:	f7ff f9f7 	bl	80015fc <WIZCHIP_READ>
 800220e:	4603      	mov	r3, r0
 8002210:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b29a      	uxth	r2, r3
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4413      	add	r3, r2
 8002222:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002224:	88bb      	ldrh	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002234:	2300      	movs	r3, #0
 8002236:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002238:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800223c:	f7ff f9de 	bl	80015fc <WIZCHIP_READ>
 8002240:	4603      	mov	r3, r0
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800224a:	2301      	movs	r3, #1
 800224c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002264:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002268:	f7ff f9c8 	bl	80015fc <WIZCHIP_READ>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002272:	2b30      	cmp	r3, #48	; 0x30
 8002274:	d102      	bne.n	800227c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002276:	2301      	movs	r3, #1
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e001      	b.n	8002280 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002292:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002296:	f7ff f9b1 	bl	80015fc <WIZCHIP_READ>
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022ae:	f7ff f9f1 	bl	8001694 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80022b2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022b6:	f7ff f9a1 	bl	80015fc <WIZCHIP_READ>
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022ce:	f7ff f9e1 	bl	8001694 <WIZCHIP_WRITE>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d104      	bne.n	80022f8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e003      	b.n	8002300 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d104      	bne.n	8002312 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e019      	b.n	8002346 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	78db      	ldrb	r3, [r3, #3]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10d      	bne.n	8002336 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	789b      	ldrb	r3, [r3, #2]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d104      	bne.n	800232c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	f043 0318 	orr.w	r3, r3, #24
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e00c      	b.n	8002346 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e007      	b.n	8002346 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d103      	bne.n	8002346 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800234e:	f7ff f9a1 	bl	8001694 <WIZCHIP_WRITE>
   wizphy_reset();
 8002352:	f7ff ff9b 	bl	800228c <wizphy_reset>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800236a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800236e:	f7ff f945 	bl	80015fc <WIZCHIP_READ>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	119b      	asrs	r3, r3, #6
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800238c:	2b20      	cmp	r3, #32
 800238e:	d001      	beq.n	8002394 <wizphy_getphyconf+0x36>
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	d103      	bne.n	800239c <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	705a      	strb	r2, [r3, #1]
         break;
 800239a:	e003      	b.n	80023a4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
         break;
 80023a2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023aa:	3b10      	subs	r3, #16
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	bf8c      	ite	hi
 80023b0:	2201      	movhi	r2, #1
 80023b2:	2200      	movls	r2, #0
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	d111      	bne.n	80023de <wizphy_getphyconf+0x80>
 80023ba:	2201      	movs	r2, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	709a      	strb	r2, [r3, #2]
         break;
 80023dc:	e003      	b.n	80023e6 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]
         break;
 80023e4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ec:	3b08      	subs	r3, #8
 80023ee:	2b18      	cmp	r3, #24
 80023f0:	bf8c      	ite	hi
 80023f2:	2201      	movhi	r2, #1
 80023f4:	2200      	movls	r2, #0
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d111      	bne.n	8002420 <wizphy_getphyconf+0xc2>
 80023fc:	2201      	movs	r2, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	70da      	strb	r2, [r3, #3]
         break;
 800241e:	e003      	b.n	8002428 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	70da      	strb	r2, [r3, #3]
         break;
 8002426:	bf00      	nop
   }
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800243e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002442:	f7ff f8db 	bl	80015fc <WIZCHIP_READ>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <wizphy_setphypmode+0x2a>
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	e030      	b.n	80024bc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002460:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d104      	bne.n	8002472 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e003      	b.n	800247a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002478:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002482:	f7ff f907 	bl	8001694 <WIZCHIP_WRITE>
   wizphy_reset();
 8002486:	f7ff ff01 	bl	800228c <wizphy_reset>
   tmp = getPHYCFGR();
 800248a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800248e:	f7ff f8b5 	bl	80015fc <WIZCHIP_READ>
 8002492:	4603      	mov	r3, r0
 8002494:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <wizphy_setphypmode+0x88>
 80024a6:	2300      	movs	r3, #0
 80024a8:	e008      	b.n	80024bc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <wizphy_setphypmode+0x88>
 80024b4:	2300      	movs	r3, #0
 80024b6:	e001      	b.n	80024bc <wizphy_setphypmode+0x8c>
   }
   return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2206      	movs	r2, #6
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80024d6:	f7ff f98b 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	330e      	adds	r3, #14
 80024de:	2204      	movs	r2, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024e6:	f7ff f983 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	330a      	adds	r3, #10
 80024ee:	2204      	movs	r2, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80024f6:	f7ff f97b 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3306      	adds	r3, #6
 80024fe:	2204      	movs	r2, #4
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002506:	f7ff f973 	bl	80017f0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7c9a      	ldrb	r2, [r3, #18]
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <wizchip_setnetinfo+0x78>)
 8002510:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7cda      	ldrb	r2, [r3, #19]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <wizchip_setnetinfo+0x78>)
 8002518:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7d1a      	ldrb	r2, [r3, #20]
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <wizchip_setnetinfo+0x78>)
 8002520:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7d5a      	ldrb	r2, [r3, #21]
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <wizchip_setnetinfo+0x78>)
 8002528:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7d9a      	ldrb	r2, [r3, #22]
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <wizchip_setnetinfo+0x7c>)
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200000dc 	.word	0x200000dc
 8002540:	200000e0 	.word	0x200000e0

08002544 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2206      	movs	r2, #6
 8002550:	4619      	mov	r1, r3
 8002552:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002556:	f7ff f8eb 	bl	8001730 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	330e      	adds	r3, #14
 800255e:	2204      	movs	r2, #4
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002566:	f7ff f8e3 	bl	8001730 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	330a      	adds	r3, #10
 800256e:	2204      	movs	r2, #4
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002576:	f7ff f8db 	bl	8001730 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3306      	adds	r3, #6
 800257e:	2204      	movs	r2, #4
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002586:	f7ff f8d3 	bl	8001730 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <wizchip_getnetinfo+0x78>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <wizchip_getnetinfo+0x78>)
 8002594:	785a      	ldrb	r2, [r3, #1]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <wizchip_getnetinfo+0x78>)
 800259c:	789a      	ldrb	r2, [r3, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <wizchip_getnetinfo+0x78>)
 80025a4:	78da      	ldrb	r2, [r3, #3]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <wizchip_getnetinfo+0x7c>)
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	759a      	strb	r2, [r3, #22]
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200000dc 	.word	0x200000dc
 80025c0:	200000e0 	.word	0x200000e0

080025c4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <wizchip_setnetmode+0x1e>
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	e00e      	b.n	8002600 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff f80a 	bl	80015fc <WIZCHIP_READ>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	4619      	mov	r1, r3
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff f84b 	bl	8001694 <WIZCHIP_WRITE>
   return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fff5 	bl	80015fc <WIZCHIP_READ>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}

08002618 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);   setRTR(nettime->time_100us);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800262a:	f7ff f833 	bl	8001694 <WIZCHIP_WRITE>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	885b      	ldrh	r3, [r3, #2]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b29b      	uxth	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800263e:	f7ff f829 	bl	8001694 <WIZCHIP_WRITE>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	885b      	ldrh	r3, [r3, #2]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800264e:	f7ff f821 	bl	8001694 <WIZCHIP_WRITE>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002662:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002666:	f7fe ffc9 	bl	80015fc <WIZCHIP_READ>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002672:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002676:	f7fe ffc1 	bl	80015fc <WIZCHIP_READ>
 800267a:	4603      	mov	r3, r0
 800267c:	b29b      	uxth	r3, r3
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b29c      	uxth	r4, r3
 8002682:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002686:	f7fe ffb9 	bl	80015fc <WIZCHIP_READ>
 800268a:	4603      	mov	r3, r0
 800268c:	b29b      	uxth	r3, r3
 800268e:	4423      	add	r3, r4
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	805a      	strh	r2, [r3, #2]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
	...

080026a0 <wizchip_select>:
const char MSG_Subnet[] = "Subnet mask: %d.%d.%d.%d\n";
const char MSG_Dns_Address[] = "DNS Address: %d.%d.%d.%d\n";
const char MSG_Status[] = "Status: %s\n";
const char MSG_Port[] = "Port number: %d\n";

void wizchip_select(void){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <wizchip_select+0x14>)
 80026aa:	f000 fc89 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40020400 	.word	0x40020400

080026b8 <wizchip_deselect>:

void wizchip_deselect(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <wizchip_deselect+0x14>)
 80026c2:	f000 fc7d 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020400 	.word	0x40020400

080026d0 <wizchip_readByte>:

uint8_t wizchip_readByte(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
	uint8_t retVal;
	HAL_SPI_Receive(&hspi2, &retVal, 1, 10U);
 80026d6:	1df9      	adds	r1, r7, #7
 80026d8:	230a      	movs	r3, #10
 80026da:	2201      	movs	r2, #1
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <wizchip_readByte+0x1c>)
 80026de:	f001 fb14 	bl	8003d0a <HAL_SPI_Receive>
	return retVal;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200000f8 	.word	0x200000f8

080026f0 <wizchip_writeByte>:

void wizchip_writeByte(uint8_t value){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &value, 1, 10U);
 80026fa:	1df9      	adds	r1, r7, #7
 80026fc:	230a      	movs	r3, #10
 80026fe:	2201      	movs	r2, #1
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <wizchip_writeByte+0x20>)
 8002702:	f001 f9c6 	bl	8003a92 <HAL_SPI_Transmit>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200000f8 	.word	0x200000f8

08002714 <wizchip_readBuff>:

void wizchip_readBuff(uint8_t* buff, uint16_t len) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, buff, len, 10U);
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	230a      	movs	r3, #10
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4803      	ldr	r0, [pc, #12]	; (8002734 <wizchip_readBuff+0x20>)
 8002728:	f001 faef 	bl	8003d0a <HAL_SPI_Receive>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200000f8 	.word	0x200000f8

08002738 <wizchip_writeBuff>:

void wizchip_writeBuff(uint8_t* buff, uint16_t len) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, buff, len, 10U);
 8002744:	887a      	ldrh	r2, [r7, #2]
 8002746:	230a      	movs	r3, #10
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4803      	ldr	r0, [pc, #12]	; (8002758 <wizchip_writeBuff+0x20>)
 800274c:	f001 f9a1 	bl	8003a92 <HAL_SPI_Transmit>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200000f8 	.word	0x200000f8

0800275c <display_netinfo>:

void display_netinfo(uint8_t mySocket, wiz_NetInfo *netInfo, uint16_t port){
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	b09b      	sub	sp, #108	; 0x6c
 8002760:	af04      	add	r7, sp, #16
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
 8002768:	4613      	mov	r3, r2
 800276a:	80bb      	strh	r3, [r7, #4]
	uint8_t mac[6];
	uint8_t gw[4];
	uint8_t sn[4];
	uint8_t dns[4];

	memcpy(ip, netInfo->ip, 4);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3306      	adds	r3, #6
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	623b      	str	r3, [r7, #32]
	memcpy(mac, netInfo->mac, 6);
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f107 0318 	add.w	r3, r7, #24
 800277a:	6810      	ldr	r0, [r2, #0]
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	8892      	ldrh	r2, [r2, #4]
 8002780:	809a      	strh	r2, [r3, #4]
	memcpy(gw, netInfo->gw, 4);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	330e      	adds	r3, #14
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	617b      	str	r3, [r7, #20]
	memcpy(sn, netInfo->sn, 4);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	330a      	adds	r3, #10
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	613b      	str	r3, [r7, #16]
	memcpy(dns, netInfo->dns, 4);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3312      	adds	r3, #18
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

	sprintf(tempString, "%s", MSG_Netinfo);
 800279a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279e:	4a69      	ldr	r2, [pc, #420]	; (8002944 <display_netinfo+0x1e8>)
 80027a0:	4969      	ldr	r1, [pc, #420]	; (8002948 <display_netinfo+0x1ec>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 f960 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 80027a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fd17 	bl	80001e0 <strlen>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb55 	bl	8000e6c <send>
	sprintf(tempString, MSG_IP_Address, ip[0],ip[1],ip[2],ip[3]);
 80027c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027cc:	461c      	mov	r4, r3
 80027ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4623      	mov	r3, r4
 80027e0:	460a      	mov	r2, r1
 80027e2:	495a      	ldr	r1, [pc, #360]	; (800294c <display_netinfo+0x1f0>)
 80027e4:	f002 f940 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 80027e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fcf7 	bl	80001e0 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fb35 	bl	8000e6c <send>
	sprintf(tempString, MSG_MAC_Address, mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
 8002802:	7e3b      	ldrb	r3, [r7, #24]
 8002804:	461d      	mov	r5, r3
 8002806:	7e7b      	ldrb	r3, [r7, #25]
 8002808:	461e      	mov	r6, r3
 800280a:	7ebb      	ldrb	r3, [r7, #26]
 800280c:	7efa      	ldrb	r2, [r7, #27]
 800280e:	7f39      	ldrb	r1, [r7, #28]
 8002810:	7f78      	ldrb	r0, [r7, #29]
 8002812:	4604      	mov	r4, r0
 8002814:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002818:	9403      	str	r4, [sp, #12]
 800281a:	9102      	str	r1, [sp, #8]
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4633      	mov	r3, r6
 8002822:	462a      	mov	r2, r5
 8002824:	494a      	ldr	r1, [pc, #296]	; (8002950 <display_netinfo+0x1f4>)
 8002826:	f002 f91f 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 800282a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fcd6 	bl	80001e0 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fb14 	bl	8000e6c <send>
	sprintf(tempString, MSG_Gateway_Address, gw[0],gw[1],gw[2],gw[3]);
 8002844:	7d3b      	ldrb	r3, [r7, #20]
 8002846:	4619      	mov	r1, r3
 8002848:	7d7b      	ldrb	r3, [r7, #21]
 800284a:	461c      	mov	r4, r3
 800284c:	7dbb      	ldrb	r3, [r7, #22]
 800284e:	7dfa      	ldrb	r2, [r7, #23]
 8002850:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002854:	9201      	str	r2, [sp, #4]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4623      	mov	r3, r4
 800285a:	460a      	mov	r2, r1
 800285c:	493d      	ldr	r1, [pc, #244]	; (8002954 <display_netinfo+0x1f8>)
 800285e:	f002 f903 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fcba 	bl	80001e0 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	b29a      	uxth	r2, r3
 8002870:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe faf8 	bl	8000e6c <send>
	sprintf(tempString, MSG_Subnet, sn[0],sn[1],sn[2],sn[3]);
 800287c:	7c3b      	ldrb	r3, [r7, #16]
 800287e:	4619      	mov	r1, r3
 8002880:	7c7b      	ldrb	r3, [r7, #17]
 8002882:	461c      	mov	r4, r3
 8002884:	7cbb      	ldrb	r3, [r7, #18]
 8002886:	7cfa      	ldrb	r2, [r7, #19]
 8002888:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800288c:	9201      	str	r2, [sp, #4]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4623      	mov	r3, r4
 8002892:	460a      	mov	r2, r1
 8002894:	4930      	ldr	r1, [pc, #192]	; (8002958 <display_netinfo+0x1fc>)
 8002896:	f002 f8e7 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fc9e 	bl	80001e0 <strlen>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fadc 	bl	8000e6c <send>
	sprintf(tempString, MSG_Dns_Address, dns[0],dns[1],dns[2],dns[3]);
 80028b4:	7b3b      	ldrb	r3, [r7, #12]
 80028b6:	4619      	mov	r1, r3
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	461c      	mov	r4, r3
 80028bc:	7bbb      	ldrb	r3, [r7, #14]
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4623      	mov	r3, r4
 80028ca:	460a      	mov	r2, r1
 80028cc:	4923      	ldr	r1, [pc, #140]	; (800295c <display_netinfo+0x200>)
 80028ce:	f002 f8cb 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 80028d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fc82 	bl	80001e0 <strlen>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fac0 	bl	8000e6c <send>
	sprintf(tempString, MSG_Port, port);
 80028ec:	88ba      	ldrh	r2, [r7, #4]
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	491b      	ldr	r1, [pc, #108]	; (8002960 <display_netinfo+0x204>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 f8b7 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 80028fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fc6e 	bl	80001e0 <strlen>
 8002904:	4603      	mov	r3, r0
 8002906:	b29a      	uxth	r2, r3
 8002908:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe faac 	bl	8000e6c <send>
	sprintf(tempString, MSG_Status, "connected");
 8002914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <display_netinfo+0x208>)
 800291a:	4913      	ldr	r1, [pc, #76]	; (8002968 <display_netinfo+0x20c>)
 800291c:	4618      	mov	r0, r3
 800291e:	f002 f8a3 	bl	8004a68 <siprintf>
	send(mySocket, tempString, strlen(tempString));
 8002922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fc5a 	bl	80001e0 <strlen>
 800292c:	4603      	mov	r3, r0
 800292e:	b29a      	uxth	r2, r3
 8002930:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fa98 	bl	8000e6c <send>
}
 800293c:	bf00      	nop
 800293e:	375c      	adds	r7, #92	; 0x5c
 8002940:	46bd      	mov	sp, r7
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002944:	08005a50 	.word	0x08005a50
 8002948:	08005a28 	.word	0x08005a28
 800294c:	08005a68 	.word	0x08005a68
 8002950:	08005a84 	.word	0x08005a84
 8002954:	08005aa4 	.word	0x08005aa4
 8002958:	08005ac4 	.word	0x08005ac4
 800295c:	08005ae0 	.word	0x08005ae0
 8002960:	08005b08 	.word	0x08005b08
 8002964:	08005a2c 	.word	0x08005a2c
 8002968:	08005afc 	.word	0x08005afc

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002988:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002996:	f7fe fdad 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f001 ffb5 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7fd fe93 	bl	80006c8 <main>
  bx  lr    
 80029a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80029b0:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 80029b4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80029b8:	200001a8 	.word	0x200001a8

080029bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>
	...

080029c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_Init+0x40>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_Init+0x40>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_Init+0x40>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 f931 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7fe fc88 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f93b 	bl	8002c9e <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 f911 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	20000038 	.word	0x20000038
 8002a60:	20000034 	.word	0x20000034

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000038 	.word	0x20000038
 8002a88:	20000194 	.word	0x20000194

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000194 	.word	0x20000194

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000038 	.word	0x20000038

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	; (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	; (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff47 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff5c 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff8e 	bl	8002ba4 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5d 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffb0 	bl	8002c0c <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e159      	b.n	8002f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8148 	bne.w	8002f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d005      	beq.n	8002d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d130      	bne.n	8002d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a2 	beq.w	8002f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5a:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_GPIO_Init+0x2f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x202>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_GPIO_Init+0x2f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x1fe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <HAL_GPIO_Init+0x2f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x1fa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x1f6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <HAL_GPIO_Init+0x300>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x1f2>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f aea2 	bls.w	8002cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e034      	b.n	800306e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800300c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f245 5255 	movw	r2, #21845	; 0x5555
 8003016:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6852      	ldr	r2, [r2, #4]
 8003020:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6892      	ldr	r2, [r2, #8]
 800302a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800302c:	f7ff fd2e 	bl	8002a8c <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003032:	e00f      	b.n	8003054 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003034:	f7ff fd2a 	bl	8002a8c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b31      	cmp	r3, #49	; 0x31
 8003040:	d908      	bls.n	8003054 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e00c      	b.n	800306e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e8      	bne.n	8003034 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800306a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003086:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e264      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b6:	4ba3      	ldr	r3, [pc, #652]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4ba0      	ldr	r3, [pc, #640]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b9d      	ldr	r3, [pc, #628]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b99      	ldr	r3, [pc, #612]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e23f      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b91      	ldr	r3, [pc, #580]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a90      	ldr	r2, [pc, #576]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a8a      	ldr	r2, [pc, #552]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a87      	ldr	r2, [pc, #540]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b84      	ldr	r3, [pc, #528]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a83      	ldr	r2, [pc, #524]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff fc9c 	bl	8002a8c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7ff fc98 	bl	8002a8c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e204      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff fc88 	bl	8002a8c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7ff fc84 	bl	8002a8c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1f0      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b5c      	ldr	r3, [pc, #368]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c4      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b56      	ldr	r3, [pc, #344]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4952      	ldr	r1, [pc, #328]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCC_OscConfig+0x2b0>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7ff fc3d 	bl	8002a8c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7ff fc39 	bl	8002a8c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a5      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4940      	ldr	r1, [pc, #256]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_OscConfig+0x2b0>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff fc1c 	bl	8002a8c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7ff fc18 	bl	8002a8c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e184      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b36      	ldr	r3, [pc, #216]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d030      	beq.n	80032e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_OscConfig+0x2b4>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7ff fbfc 	bl	8002a8c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7ff fbf8 	bl	8002a8c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e164      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b26      	ldr	r3, [pc, #152]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
 80032b6:	e015      	b.n	80032e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_OscConfig+0x2b4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7ff fbe5 	bl	8002a8c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7ff fbe1 	bl	8002a8c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e14d      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a0 	beq.w	8003432 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a0e      	ldr	r2, [pc, #56]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x2b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d121      	bne.n	8003372 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_RCC_OscConfig+0x2b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <HAL_RCC_OscConfig+0x2b8>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7ff fba7 	bl	8002a8c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e011      	b.n	8003366 <HAL_RCC_OscConfig+0x2ce>
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	42470000 	.word	0x42470000
 800334c:	42470e80 	.word	0x42470e80
 8003350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7ff fb9a 	bl	8002a8c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e106      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b85      	ldr	r3, [pc, #532]	; (800357c <HAL_RCC_OscConfig+0x4e4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x2f0>
 800337a:	4b81      	ldr	r3, [pc, #516]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	e01c      	b.n	80033c2 <HAL_RCC_OscConfig+0x32a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x312>
 8003390:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a7a      	ldr	r2, [pc, #488]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	4b78      	ldr	r3, [pc, #480]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a77      	ldr	r2, [pc, #476]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x32a>
 80033aa:	4b75      	ldr	r3, [pc, #468]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a74      	ldr	r2, [pc, #464]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	4b72      	ldr	r3, [pc, #456]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a71      	ldr	r2, [pc, #452]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7ff fb5f 	bl	8002a8c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7ff fb5b 	bl	8002a8c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0c5      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x33a>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7ff fb49 	bl	8002a8c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7ff fb45 	bl	8002a8c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0af      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b56      	ldr	r3, [pc, #344]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a55      	ldr	r2, [pc, #340]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 809b 	beq.w	8003572 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343c:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d05c      	beq.n	8003502 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d141      	bne.n	80034d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7ff fb19 	bl	8002a8c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7ff fb15 	bl	8002a8c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e081      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	019b      	lsls	r3, r3, #6
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7ff faee 	bl	8002a8c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7ff faea 	bl	8002a8c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e056      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x41c>
 80034d2:	e04e      	b.n	8003572 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7ff fad7 	bl	8002a8c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff fad3 	bl	8002a8c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e03f      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x44a>
 8003500:	e037      	b.n	8003572 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e032      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d028      	beq.n	800356e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d121      	bne.n	800356e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d11a      	bne.n	800356e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003544:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003546:	4293      	cmp	r3, r2
 8003548:	d111      	bne.n	800356e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d107      	bne.n	800356e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40007000 	.word	0x40007000
 8003580:	40023800 	.word	0x40023800
 8003584:	42470060 	.word	0x42470060

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7ff fa08 	bl	8002a8c <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7ff fa04 	bl	8002a8c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f968 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	08005a38 	.word	0x08005a38
 800374c:	20000004 	.word	0x20000004
 8003750:	20000034 	.word	0x20000034

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b67      	ldr	r3, [pc, #412]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80bd 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e0b7      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800378a:	60bb      	str	r3, [r7, #8]
       break;
 800378c:	e0b7      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003790:	60bb      	str	r3, [r7, #8]
      break;
 8003792:	e0b4      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b5b      	ldr	r3, [pc, #364]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d04d      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b58      	ldr	r3, [pc, #352]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	ea02 0800 	and.w	r8, r2, r0
 80037c2:	ea03 0901 	and.w	r9, r3, r1
 80037c6:	4640      	mov	r0, r8
 80037c8:	4649      	mov	r1, r9
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	014b      	lsls	r3, r1, #5
 80037d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037d8:	0142      	lsls	r2, r0, #5
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	ebb0 0008 	subs.w	r0, r0, r8
 80037e2:	eb61 0109 	sbc.w	r1, r1, r9
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	018b      	lsls	r3, r1, #6
 80037f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037f4:	0182      	lsls	r2, r0, #6
 80037f6:	1a12      	subs	r2, r2, r0
 80037f8:	eb63 0301 	sbc.w	r3, r3, r1
 80037fc:	f04f 0000 	mov.w	r0, #0
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	00d9      	lsls	r1, r3, #3
 8003806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380a:	00d0      	lsls	r0, r2, #3
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	eb12 0208 	adds.w	r2, r2, r8
 8003814:	eb43 0309 	adc.w	r3, r3, r9
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0259      	lsls	r1, r3, #9
 8003822:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003826:	0250      	lsls	r0, r2, #9
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f7fc fd2a 	bl	8000290 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e04a      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	461a      	mov	r2, r3
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	ea02 0400 	and.w	r4, r2, r0
 800385e:	ea03 0501 	and.w	r5, r3, r1
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	014b      	lsls	r3, r1, #5
 8003870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003874:	0142      	lsls	r2, r0, #5
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	1b00      	subs	r0, r0, r4
 800387c:	eb61 0105 	sbc.w	r1, r1, r5
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	018b      	lsls	r3, r1, #6
 800388a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800388e:	0182      	lsls	r2, r0, #6
 8003890:	1a12      	subs	r2, r2, r0
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	00d9      	lsls	r1, r3, #3
 80038a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038a4:	00d0      	lsls	r0, r2, #3
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	1912      	adds	r2, r2, r4
 80038ac:	eb45 0303 	adc.w	r3, r5, r3
 80038b0:	f04f 0000 	mov.w	r0, #0
 80038b4:	f04f 0100 	mov.w	r1, #0
 80038b8:	0299      	lsls	r1, r3, #10
 80038ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038be:	0290      	lsls	r0, r2, #10
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	f7fc fcde 	bl	8000290 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	60bb      	str	r3, [r7, #8]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038fa:	60bb      	str	r3, [r7, #8]
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	68bb      	ldr	r3, [r7, #8]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400
 8003914:	007a1200 	.word	0x007a1200

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	08005a48 	.word	0x08005a48

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffdc 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	08005a48 	.word	0x08005a48

08003980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07b      	b.n	8003a8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a2:	d009      	beq.n	80039b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]
 80039aa:	e005      	b.n	80039b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fc30 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	ea42 0103 	orr.w	r1, r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	f003 0104 	and.w	r1, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0210 	and.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b088      	sub	sp, #32
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_SPI_Transmit+0x22>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e126      	b.n	8003d02 <HAL_SPI_Transmit+0x270>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003abc:	f7fe ffe6 	bl	8002a8c <HAL_GetTick>
 8003ac0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ad6:	e10b      	b.n	8003cf0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x52>
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ae8:	e102      	b.n	8003cf0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2203      	movs	r2, #3
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d10f      	bne.n	8003b52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d007      	beq.n	8003b70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b78:	d14b      	bne.n	8003c12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Transmit+0xf6>
 8003b82:	8afb      	ldrh	r3, [r7, #22]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d13e      	bne.n	8003c06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	881a      	ldrh	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bac:	e02b      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d112      	bne.n	8003be2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	86da      	strh	r2, [r3, #54]	; 0x36
 8003be0:	e011      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be2:	f7fe ff53 	bl	8002a8c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d803      	bhi.n	8003bfa <HAL_SPI_Transmit+0x168>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d102      	bne.n	8003c00 <HAL_SPI_Transmit+0x16e>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c04:	e074      	b.n	8003cf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ce      	bne.n	8003bae <HAL_SPI_Transmit+0x11c>
 8003c10:	e04c      	b.n	8003cac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x18e>
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d140      	bne.n	8003ca2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c46:	e02c      	b.n	8003ca2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d113      	bne.n	8003c7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c7c:	e011      	b.n	8003ca2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c7e:	f7fe ff05 	bl	8002a8c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d803      	bhi.n	8003c96 <HAL_SPI_Transmit+0x204>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d102      	bne.n	8003c9c <HAL_SPI_Transmit+0x20a>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ca0:	e026      	b.n	8003cf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1cd      	bne.n	8003c48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fbcb 	bl	800444c <SPI_EndRxTxTransaction>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e000      	b.n	8003cf0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d26:	d112      	bne.n	8003d4e <HAL_SPI_Receive+0x44>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10e      	bne.n	8003d4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2204      	movs	r2, #4
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f8f1 	bl	8003f2c <HAL_SPI_TransmitReceive>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	e0ea      	b.n	8003f24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_SPI_Receive+0x52>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0e3      	b.n	8003f24 <HAL_SPI_Receive+0x21a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d64:	f7fe fe92 	bl	8002a8c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
 8003d78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d7a:	e0ca      	b.n	8003f12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Receive+0x7e>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d8c:	e0c1      	b.n	8003f12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2204      	movs	r2, #4
 8003d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d10f      	bne.n	8003df6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d007      	beq.n	8003e14 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d162      	bne.n	8003ee2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e1c:	e02e      	b.n	8003e7c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d115      	bne.n	8003e58 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f103 020c 	add.w	r2, r3, #12
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e56:	e011      	b.n	8003e7c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e58:	f7fe fe18 	bl	8002a8c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d803      	bhi.n	8003e70 <HAL_SPI_Receive+0x166>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Receive+0x16c>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e7a:	e04a      	b.n	8003f12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cb      	bne.n	8003e1e <HAL_SPI_Receive+0x114>
 8003e86:	e031      	b.n	8003eec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d113      	bne.n	8003ebe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ebc:	e011      	b.n	8003ee2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ebe:	f7fe fde5 	bl	8002a8c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d803      	bhi.n	8003ed6 <HAL_SPI_Receive+0x1cc>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d102      	bne.n	8003edc <HAL_SPI_Receive+0x1d2>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ee0:	e017      	b.n	8003f12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1cd      	bne.n	8003e88 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa45 	bl	8004380 <SPI_EndRxTransaction>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	e000      	b.n	8003f12 <HAL_SPI_Receive+0x208>
  }

error :
 8003f10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	; 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x26>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e18a      	b.n	8004268 <HAL_SPI_TransmitReceive+0x33c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5a:	f7fe fd97 	bl	8002a8c <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d00f      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x70>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d107      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x68>
 8003f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d003      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f9a:	e15b      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x82>
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fb4:	e14e      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2205      	movs	r2, #5
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	887a      	ldrh	r2, [r7, #2]
 8003ff2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d007      	beq.n	800401e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d178      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x10a>
 8004030:	8b7b      	ldrh	r3, [r7, #26]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d166      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	881a      	ldrh	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405a:	e053      	b.n	8004104 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d11b      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x176>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d016      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x176>
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d113      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d119      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x1b8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	b292      	uxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040e4:	f7fe fcd2 	bl	8002a8c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d807      	bhi.n	8004104 <HAL_SPI_TransmitReceive+0x1d8>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d003      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004102:	e0a7      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1a6      	bne.n	800405c <HAL_SPI_TransmitReceive+0x130>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1a1      	bne.n	800405c <HAL_SPI_TransmitReceive+0x130>
 8004118:	e07c      	b.n	8004214 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x1fc>
 8004122:	8b7b      	ldrh	r3, [r7, #26]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d16b      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414e:	e057      	b.n	8004200 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d11c      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x26c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d017      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x26c>
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d114      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <HAL_SPI_TransmitReceive+0x2ae>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d014      	beq.n	80041da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d6:	2301      	movs	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041da:	f7fe fc57 	bl	8002a8c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_TransmitReceive+0x2c6>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x2cc>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041fe:	e029      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1a2      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x224>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d19d      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f917 	bl	800444c <SPI_EndRxTxTransaction>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d006      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004230:	e010      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	e000      	b.n	8004254 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004280:	f7fe fc04 	bl	8002a8c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004290:	f7fe fbfc 	bl	8002a8c <HAL_GetTick>
 8004294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	015b      	lsls	r3, r3, #5
 800429c:	0d1b      	lsrs	r3, r3, #20
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a6:	e054      	b.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d050      	beq.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042b0:	f7fe fbec 	bl	8002a8c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d902      	bls.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d13d      	bne.n	8004342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d111      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d004      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f2:	d107      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430c:	d10f      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800432c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e017      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	429a      	cmp	r2, r3
 800436e:	d19b      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000004 	.word	0x20000004

08004380 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004394:	d111      	bne.n	80043ba <SPI_EndRxTransaction+0x3a>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	d004      	beq.n	80043aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d107      	bne.n	80043ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c2:	d12a      	bne.n	800441a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043cc:	d012      	beq.n	80043f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff ff49 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02d      	beq.n	8004440 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e026      	b.n	8004442 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2101      	movs	r1, #1
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff ff36 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01a      	beq.n	8004440 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e013      	b.n	8004442 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	2101      	movs	r1, #1
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ff23 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e000      	b.n	8004442 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <SPI_EndRxTxTransaction+0x7c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <SPI_EndRxTxTransaction+0x80>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0d5b      	lsrs	r3, r3, #21
 8004464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d112      	bne.n	800449e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fef4 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00f      	b.n	80044be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d0f2      	beq.n	800449e <SPI_EndRxTxTransaction+0x52>
 80044b8:	e000      	b.n	80044bc <SPI_EndRxTxTransaction+0x70>
        break;
 80044ba:	bf00      	nop
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000004 	.word	0x20000004
 80044cc:	165e9f81 	.word	0x165e9f81

080044d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e03f      	b.n	8004562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f838 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f829 	bl	800456c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	b09f      	sub	sp, #124	; 0x7c
 8004572:	af00      	add	r7, sp, #0
 8004574:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	68d9      	ldr	r1, [r3, #12]
 8004584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	ea40 0301 	orr.w	r3, r0, r1
 800458c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	431a      	orrs	r2, r3
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b0:	f021 010c 	bic.w	r1, r1, #12
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ba:	430b      	orrs	r3, r1
 80045bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	6999      	ldr	r1, [r3, #24]
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	ea40 0301 	orr.w	r3, r0, r1
 80045d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4bc5      	ldr	r3, [pc, #788]	; (80048f0 <UART_SetConfig+0x384>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d004      	beq.n	80045ea <UART_SetConfig+0x7e>
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4bc3      	ldr	r3, [pc, #780]	; (80048f4 <UART_SetConfig+0x388>)
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d103      	bne.n	80045f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ea:	f7ff f9b5 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80045ee:	6778      	str	r0, [r7, #116]	; 0x74
 80045f0:	e002      	b.n	80045f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f2:	f7ff f99d 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 80045f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	f040 80b6 	bne.w	8004770 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004606:	461c      	mov	r4, r3
 8004608:	f04f 0500 	mov.w	r5, #0
 800460c:	4622      	mov	r2, r4
 800460e:	462b      	mov	r3, r5
 8004610:	1891      	adds	r1, r2, r2
 8004612:	6439      	str	r1, [r7, #64]	; 0x40
 8004614:	415b      	adcs	r3, r3
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800461c:	1912      	adds	r2, r2, r4
 800461e:	eb45 0303 	adc.w	r3, r5, r3
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	00d9      	lsls	r1, r3, #3
 800462c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004630:	00d0      	lsls	r0, r2, #3
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	1911      	adds	r1, r2, r4
 8004638:	6639      	str	r1, [r7, #96]	; 0x60
 800463a:	416b      	adcs	r3, r5
 800463c:	667b      	str	r3, [r7, #100]	; 0x64
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	461a      	mov	r2, r3
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	1891      	adds	r1, r2, r2
 800464a:	63b9      	str	r1, [r7, #56]	; 0x38
 800464c:	415b      	adcs	r3, r3
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004654:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004658:	f7fb fe1a 	bl	8000290 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4ba5      	ldr	r3, [pc, #660]	; (80048f8 <UART_SetConfig+0x38c>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	011e      	lsls	r6, r3, #4
 800466a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800466c:	461c      	mov	r4, r3
 800466e:	f04f 0500 	mov.w	r5, #0
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	1891      	adds	r1, r2, r2
 8004678:	6339      	str	r1, [r7, #48]	; 0x30
 800467a:	415b      	adcs	r3, r3
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
 800467e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004682:	1912      	adds	r2, r2, r4
 8004684:	eb45 0303 	adc.w	r3, r5, r3
 8004688:	f04f 0000 	mov.w	r0, #0
 800468c:	f04f 0100 	mov.w	r1, #0
 8004690:	00d9      	lsls	r1, r3, #3
 8004692:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004696:	00d0      	lsls	r0, r2, #3
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	1911      	adds	r1, r2, r4
 800469e:	65b9      	str	r1, [r7, #88]	; 0x58
 80046a0:	416b      	adcs	r3, r5
 80046a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	1891      	adds	r1, r2, r2
 80046b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80046b2:	415b      	adcs	r3, r3
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046be:	f7fb fde7 	bl	8000290 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4b8c      	ldr	r3, [pc, #560]	; (80048f8 <UART_SetConfig+0x38c>)
 80046c8:	fba3 1302 	umull	r1, r3, r3, r2
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	2164      	movs	r1, #100	; 0x64
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	3332      	adds	r3, #50	; 0x32
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <UART_SetConfig+0x38c>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e8:	441e      	add	r6, r3
 80046ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ec:	4618      	mov	r0, r3
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	1894      	adds	r4, r2, r2
 80046f8:	623c      	str	r4, [r7, #32]
 80046fa:	415b      	adcs	r3, r3
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004702:	1812      	adds	r2, r2, r0
 8004704:	eb41 0303 	adc.w	r3, r1, r3
 8004708:	f04f 0400 	mov.w	r4, #0
 800470c:	f04f 0500 	mov.w	r5, #0
 8004710:	00dd      	lsls	r5, r3, #3
 8004712:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004716:	00d4      	lsls	r4, r2, #3
 8004718:	4622      	mov	r2, r4
 800471a:	462b      	mov	r3, r5
 800471c:	1814      	adds	r4, r2, r0
 800471e:	653c      	str	r4, [r7, #80]	; 0x50
 8004720:	414b      	adcs	r3, r1
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	461a      	mov	r2, r3
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	1891      	adds	r1, r2, r2
 8004730:	61b9      	str	r1, [r7, #24]
 8004732:	415b      	adcs	r3, r3
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800473e:	f7fb fda7 	bl	8000290 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <UART_SetConfig+0x38c>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	3332      	adds	r3, #50	; 0x32
 800475a:	4a67      	ldr	r2, [pc, #412]	; (80048f8 <UART_SetConfig+0x38c>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 0207 	and.w	r2, r3, #7
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4432      	add	r2, r6
 800476c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800476e:	e0b9      	b.n	80048e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004772:	461c      	mov	r4, r3
 8004774:	f04f 0500 	mov.w	r5, #0
 8004778:	4622      	mov	r2, r4
 800477a:	462b      	mov	r3, r5
 800477c:	1891      	adds	r1, r2, r2
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	415b      	adcs	r3, r3
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004788:	1912      	adds	r2, r2, r4
 800478a:	eb45 0303 	adc.w	r3, r5, r3
 800478e:	f04f 0000 	mov.w	r0, #0
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	00d9      	lsls	r1, r3, #3
 8004798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800479c:	00d0      	lsls	r0, r2, #3
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	eb12 0804 	adds.w	r8, r2, r4
 80047a6:	eb43 0905 	adc.w	r9, r3, r5
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	008b      	lsls	r3, r1, #2
 80047be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047c2:	0082      	lsls	r2, r0, #2
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fb fd62 	bl	8000290 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b49      	ldr	r3, [pc, #292]	; (80048f8 <UART_SetConfig+0x38c>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	011e      	lsls	r6, r3, #4
 80047da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047dc:	4618      	mov	r0, r3
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	1894      	adds	r4, r2, r2
 80047e8:	60bc      	str	r4, [r7, #8]
 80047ea:	415b      	adcs	r3, r3
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f2:	1812      	adds	r2, r2, r0
 80047f4:	eb41 0303 	adc.w	r3, r1, r3
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	f04f 0500 	mov.w	r5, #0
 8004800:	00dd      	lsls	r5, r3, #3
 8004802:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004806:	00d4      	lsls	r4, r2, #3
 8004808:	4622      	mov	r2, r4
 800480a:	462b      	mov	r3, r5
 800480c:	1814      	adds	r4, r2, r0
 800480e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004810:	414b      	adcs	r3, r1
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	008b      	lsls	r3, r1, #2
 8004828:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800482c:	0082      	lsls	r2, r0, #2
 800482e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004832:	f7fb fd2d 	bl	8000290 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <UART_SetConfig+0x38c>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <UART_SetConfig+0x38c>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	441e      	add	r6, r3
 800485c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485e:	4618      	mov	r0, r3
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	1894      	adds	r4, r2, r2
 800486a:	603c      	str	r4, [r7, #0]
 800486c:	415b      	adcs	r3, r3
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004874:	1812      	adds	r2, r2, r0
 8004876:	eb41 0303 	adc.w	r3, r1, r3
 800487a:	f04f 0400 	mov.w	r4, #0
 800487e:	f04f 0500 	mov.w	r5, #0
 8004882:	00dd      	lsls	r5, r3, #3
 8004884:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004888:	00d4      	lsls	r4, r2, #3
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	eb12 0a00 	adds.w	sl, r2, r0
 8004892:	eb43 0b01 	adc.w	fp, r3, r1
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048ae:	0082      	lsls	r2, r0, #2
 80048b0:	4650      	mov	r0, sl
 80048b2:	4659      	mov	r1, fp
 80048b4:	f7fb fcec 	bl	8000290 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <UART_SetConfig+0x38c>)
 80048be:	fba3 1302 	umull	r1, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2164      	movs	r1, #100	; 0x64
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <UART_SetConfig+0x38c>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4432      	add	r2, r6
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	377c      	adds	r7, #124	; 0x7c
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40011000 	.word	0x40011000
 80048f4:	40011400 	.word	0x40011400
 80048f8:	51eb851f 	.word	0x51eb851f

080048fc <__errno>:
 80048fc:	4b01      	ldr	r3, [pc, #4]	; (8004904 <__errno+0x8>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000003c 	.word	0x2000003c

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4d0d      	ldr	r5, [pc, #52]	; (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	; (8004944 <__libc_init_array+0x3c>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2600      	movs	r6, #0
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4d0b      	ldr	r5, [pc, #44]	; (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	; (800494c <__libc_init_array+0x44>)
 800491c:	f001 f84c 	bl	80059b8 <_init>
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2600      	movs	r6, #0
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08005bbc 	.word	0x08005bbc
 8004944:	08005bbc 	.word	0x08005bbc
 8004948:	08005bbc 	.word	0x08005bbc
 800494c:	08005bc0 	.word	0x08005bc0

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004966:	4291      	cmp	r1, r2
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <memset>:
 800496c:	4402      	add	r2, r0
 800496e:	4603      	mov	r3, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <_puts_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	460e      	mov	r6, r1
 8004980:	4605      	mov	r5, r0
 8004982:	b118      	cbz	r0, 800498c <_puts_r+0x10>
 8004984:	6983      	ldr	r3, [r0, #24]
 8004986:	b90b      	cbnz	r3, 800498c <_puts_r+0x10>
 8004988:	f000 fa68 	bl	8004e5c <__sinit>
 800498c:	69ab      	ldr	r3, [r5, #24]
 800498e:	68ac      	ldr	r4, [r5, #8]
 8004990:	b913      	cbnz	r3, 8004998 <_puts_r+0x1c>
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fa62 	bl	8004e5c <__sinit>
 8004998:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <_puts_r+0xd0>)
 800499a:	429c      	cmp	r4, r3
 800499c:	d120      	bne.n	80049e0 <_puts_r+0x64>
 800499e:	686c      	ldr	r4, [r5, #4]
 80049a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a2:	07db      	lsls	r3, r3, #31
 80049a4:	d405      	bmi.n	80049b2 <_puts_r+0x36>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	0598      	lsls	r0, r3, #22
 80049aa:	d402      	bmi.n	80049b2 <_puts_r+0x36>
 80049ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ae:	f000 faf3 	bl	8004f98 <__retarget_lock_acquire_recursive>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	0719      	lsls	r1, r3, #28
 80049b6:	d51d      	bpl.n	80049f4 <_puts_r+0x78>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	b1db      	cbz	r3, 80049f4 <_puts_r+0x78>
 80049bc:	3e01      	subs	r6, #1
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	bb39      	cbnz	r1, 8004a1a <_puts_r+0x9e>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da38      	bge.n	8004a40 <_puts_r+0xc4>
 80049ce:	4622      	mov	r2, r4
 80049d0:	210a      	movs	r1, #10
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f868 	bl	8004aa8 <__swbuf_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	d011      	beq.n	8004a00 <_puts_r+0x84>
 80049dc:	250a      	movs	r5, #10
 80049de:	e011      	b.n	8004a04 <_puts_r+0x88>
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <_puts_r+0xd4>)
 80049e2:	429c      	cmp	r4, r3
 80049e4:	d101      	bne.n	80049ea <_puts_r+0x6e>
 80049e6:	68ac      	ldr	r4, [r5, #8]
 80049e8:	e7da      	b.n	80049a0 <_puts_r+0x24>
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <_puts_r+0xd8>)
 80049ec:	429c      	cmp	r4, r3
 80049ee:	bf08      	it	eq
 80049f0:	68ec      	ldreq	r4, [r5, #12]
 80049f2:	e7d5      	b.n	80049a0 <_puts_r+0x24>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f8a8 	bl	8004b4c <__swsetup_r>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0dd      	beq.n	80049bc <_puts_r+0x40>
 8004a00:	f04f 35ff 	mov.w	r5, #4294967295
 8004a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a06:	07da      	lsls	r2, r3, #31
 8004a08:	d405      	bmi.n	8004a16 <_puts_r+0x9a>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_puts_r+0x9a>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f000 fac2 	bl	8004f9a <__retarget_lock_release_recursive>
 8004a16:	4628      	mov	r0, r5
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da04      	bge.n	8004a28 <_puts_r+0xac>
 8004a1e:	69a2      	ldr	r2, [r4, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	dc06      	bgt.n	8004a32 <_puts_r+0xb6>
 8004a24:	290a      	cmp	r1, #10
 8004a26:	d004      	beq.n	8004a32 <_puts_r+0xb6>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	7019      	strb	r1, [r3, #0]
 8004a30:	e7c5      	b.n	80049be <_puts_r+0x42>
 8004a32:	4622      	mov	r2, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f837 	bl	8004aa8 <__swbuf_r>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d1bf      	bne.n	80049be <_puts_r+0x42>
 8004a3e:	e7df      	b.n	8004a00 <_puts_r+0x84>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	250a      	movs	r5, #10
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	701d      	strb	r5, [r3, #0]
 8004a4a:	e7db      	b.n	8004a04 <_puts_r+0x88>
 8004a4c:	08005b40 	.word	0x08005b40
 8004a50:	08005b60 	.word	0x08005b60
 8004a54:	08005b20 	.word	0x08005b20

08004a58 <puts>:
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <puts+0xc>)
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f7ff bf8d 	b.w	800497c <_puts_r>
 8004a62:	bf00      	nop
 8004a64:	2000003c 	.word	0x2000003c

08004a68 <siprintf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b500      	push	{lr}
 8004a6c:	b09c      	sub	sp, #112	; 0x70
 8004a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a70:	9002      	str	r0, [sp, #8]
 8004a72:	9006      	str	r0, [sp, #24]
 8004a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a78:	4809      	ldr	r0, [pc, #36]	; (8004aa0 <siprintf+0x38>)
 8004a7a:	9107      	str	r1, [sp, #28]
 8004a7c:	9104      	str	r1, [sp, #16]
 8004a7e:	4909      	ldr	r1, [pc, #36]	; (8004aa4 <siprintf+0x3c>)
 8004a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a84:	9105      	str	r1, [sp, #20]
 8004a86:	6800      	ldr	r0, [r0, #0]
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	a902      	add	r1, sp, #8
 8004a8c:	f000 fbf0 	bl	8005270 <_svfiprintf_r>
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	b01c      	add	sp, #112	; 0x70
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4770      	bx	lr
 8004aa0:	2000003c 	.word	0x2000003c
 8004aa4:	ffff0208 	.word	0xffff0208

08004aa8 <__swbuf_r>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	460e      	mov	r6, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	4605      	mov	r5, r0
 8004ab0:	b118      	cbz	r0, 8004aba <__swbuf_r+0x12>
 8004ab2:	6983      	ldr	r3, [r0, #24]
 8004ab4:	b90b      	cbnz	r3, 8004aba <__swbuf_r+0x12>
 8004ab6:	f000 f9d1 	bl	8004e5c <__sinit>
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <__swbuf_r+0x98>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d12b      	bne.n	8004b18 <__swbuf_r+0x70>
 8004ac0:	686c      	ldr	r4, [r5, #4]
 8004ac2:	69a3      	ldr	r3, [r4, #24]
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	071a      	lsls	r2, r3, #28
 8004aca:	d52f      	bpl.n	8004b2c <__swbuf_r+0x84>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	b36b      	cbz	r3, 8004b2c <__swbuf_r+0x84>
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	6820      	ldr	r0, [r4, #0]
 8004ad4:	1ac0      	subs	r0, r0, r3
 8004ad6:	6963      	ldr	r3, [r4, #20]
 8004ad8:	b2f6      	uxtb	r6, r6
 8004ada:	4283      	cmp	r3, r0
 8004adc:	4637      	mov	r7, r6
 8004ade:	dc04      	bgt.n	8004aea <__swbuf_r+0x42>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f926 	bl	8004d34 <_fflush_r>
 8004ae8:	bb30      	cbnz	r0, 8004b38 <__swbuf_r+0x90>
 8004aea:	68a3      	ldr	r3, [r4, #8]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	60a3      	str	r3, [r4, #8]
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	701e      	strb	r6, [r3, #0]
 8004af8:	6963      	ldr	r3, [r4, #20]
 8004afa:	3001      	adds	r0, #1
 8004afc:	4283      	cmp	r3, r0
 8004afe:	d004      	beq.n	8004b0a <__swbuf_r+0x62>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	07db      	lsls	r3, r3, #31
 8004b04:	d506      	bpl.n	8004b14 <__swbuf_r+0x6c>
 8004b06:	2e0a      	cmp	r6, #10
 8004b08:	d104      	bne.n	8004b14 <__swbuf_r+0x6c>
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 f911 	bl	8004d34 <_fflush_r>
 8004b12:	b988      	cbnz	r0, 8004b38 <__swbuf_r+0x90>
 8004b14:	4638      	mov	r0, r7
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <__swbuf_r+0x9c>)
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d101      	bne.n	8004b22 <__swbuf_r+0x7a>
 8004b1e:	68ac      	ldr	r4, [r5, #8]
 8004b20:	e7cf      	b.n	8004ac2 <__swbuf_r+0x1a>
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <__swbuf_r+0xa0>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	bf08      	it	eq
 8004b28:	68ec      	ldreq	r4, [r5, #12]
 8004b2a:	e7ca      	b.n	8004ac2 <__swbuf_r+0x1a>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f80c 	bl	8004b4c <__swsetup_r>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0cb      	beq.n	8004ad0 <__swbuf_r+0x28>
 8004b38:	f04f 37ff 	mov.w	r7, #4294967295
 8004b3c:	e7ea      	b.n	8004b14 <__swbuf_r+0x6c>
 8004b3e:	bf00      	nop
 8004b40:	08005b40 	.word	0x08005b40
 8004b44:	08005b60 	.word	0x08005b60
 8004b48:	08005b20 	.word	0x08005b20

08004b4c <__swsetup_r>:
 8004b4c:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <__swsetup_r+0xcc>)
 8004b4e:	b570      	push	{r4, r5, r6, lr}
 8004b50:	681d      	ldr	r5, [r3, #0]
 8004b52:	4606      	mov	r6, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	b125      	cbz	r5, 8004b62 <__swsetup_r+0x16>
 8004b58:	69ab      	ldr	r3, [r5, #24]
 8004b5a:	b913      	cbnz	r3, 8004b62 <__swsetup_r+0x16>
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f97d 	bl	8004e5c <__sinit>
 8004b62:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <__swsetup_r+0xd0>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d10f      	bne.n	8004b88 <__swsetup_r+0x3c>
 8004b68:	686c      	ldr	r4, [r5, #4]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b70:	0719      	lsls	r1, r3, #28
 8004b72:	d42c      	bmi.n	8004bce <__swsetup_r+0x82>
 8004b74:	06dd      	lsls	r5, r3, #27
 8004b76:	d411      	bmi.n	8004b9c <__swsetup_r+0x50>
 8004b78:	2309      	movs	r3, #9
 8004b7a:	6033      	str	r3, [r6, #0]
 8004b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	e03e      	b.n	8004c06 <__swsetup_r+0xba>
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <__swsetup_r+0xd4>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	d101      	bne.n	8004b92 <__swsetup_r+0x46>
 8004b8e:	68ac      	ldr	r4, [r5, #8]
 8004b90:	e7eb      	b.n	8004b6a <__swsetup_r+0x1e>
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <__swsetup_r+0xd8>)
 8004b94:	429c      	cmp	r4, r3
 8004b96:	bf08      	it	eq
 8004b98:	68ec      	ldreq	r4, [r5, #12]
 8004b9a:	e7e6      	b.n	8004b6a <__swsetup_r+0x1e>
 8004b9c:	0758      	lsls	r0, r3, #29
 8004b9e:	d512      	bpl.n	8004bc6 <__swsetup_r+0x7a>
 8004ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba2:	b141      	cbz	r1, 8004bb6 <__swsetup_r+0x6a>
 8004ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	d002      	beq.n	8004bb2 <__swsetup_r+0x66>
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 fa59 	bl	8005064 <_free_r>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f043 0308 	orr.w	r3, r3, #8
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	b94b      	cbnz	r3, 8004be6 <__swsetup_r+0x9a>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bdc:	d003      	beq.n	8004be6 <__swsetup_r+0x9a>
 8004bde:	4621      	mov	r1, r4
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f9ff 	bl	8004fe4 <__smakebuf_r>
 8004be6:	89a0      	ldrh	r0, [r4, #12]
 8004be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bec:	f010 0301 	ands.w	r3, r0, #1
 8004bf0:	d00a      	beq.n	8004c08 <__swsetup_r+0xbc>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	6963      	ldr	r3, [r4, #20]
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	61a3      	str	r3, [r4, #24]
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	b943      	cbnz	r3, 8004c12 <__swsetup_r+0xc6>
 8004c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c04:	d1ba      	bne.n	8004b7c <__swsetup_r+0x30>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	0781      	lsls	r1, r0, #30
 8004c0a:	bf58      	it	pl
 8004c0c:	6963      	ldrpl	r3, [r4, #20]
 8004c0e:	60a3      	str	r3, [r4, #8]
 8004c10:	e7f4      	b.n	8004bfc <__swsetup_r+0xb0>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7f7      	b.n	8004c06 <__swsetup_r+0xba>
 8004c16:	bf00      	nop
 8004c18:	2000003c 	.word	0x2000003c
 8004c1c:	08005b40 	.word	0x08005b40
 8004c20:	08005b60 	.word	0x08005b60
 8004c24:	08005b20 	.word	0x08005b20

08004c28 <__sflush_r>:
 8004c28:	898a      	ldrh	r2, [r1, #12]
 8004c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	4605      	mov	r5, r0
 8004c30:	0710      	lsls	r0, r2, #28
 8004c32:	460c      	mov	r4, r1
 8004c34:	d458      	bmi.n	8004ce8 <__sflush_r+0xc0>
 8004c36:	684b      	ldr	r3, [r1, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dc05      	bgt.n	8004c48 <__sflush_r+0x20>
 8004c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dc02      	bgt.n	8004c48 <__sflush_r+0x20>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d0f9      	beq.n	8004c42 <__sflush_r+0x1a>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c54:	682f      	ldr	r7, [r5, #0]
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	d032      	beq.n	8004cc0 <__sflush_r+0x98>
 8004c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	075a      	lsls	r2, r3, #29
 8004c60:	d505      	bpl.n	8004c6e <__sflush_r+0x46>
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	1ac0      	subs	r0, r0, r3
 8004c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c68:	b10b      	cbz	r3, 8004c6e <__sflush_r+0x46>
 8004c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c6c:	1ac0      	subs	r0, r0, r3
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4602      	mov	r2, r0
 8004c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c74:	6a21      	ldr	r1, [r4, #32]
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b0      	blx	r6
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	d106      	bne.n	8004c8e <__sflush_r+0x66>
 8004c80:	6829      	ldr	r1, [r5, #0]
 8004c82:	291d      	cmp	r1, #29
 8004c84:	d82c      	bhi.n	8004ce0 <__sflush_r+0xb8>
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <__sflush_r+0x108>)
 8004c88:	40ca      	lsrs	r2, r1
 8004c8a:	07d6      	lsls	r6, r2, #31
 8004c8c:	d528      	bpl.n	8004ce0 <__sflush_r+0xb8>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	6062      	str	r2, [r4, #4]
 8004c92:	04d9      	lsls	r1, r3, #19
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	6022      	str	r2, [r4, #0]
 8004c98:	d504      	bpl.n	8004ca4 <__sflush_r+0x7c>
 8004c9a:	1c42      	adds	r2, r0, #1
 8004c9c:	d101      	bne.n	8004ca2 <__sflush_r+0x7a>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	b903      	cbnz	r3, 8004ca4 <__sflush_r+0x7c>
 8004ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca6:	602f      	str	r7, [r5, #0]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d0ca      	beq.n	8004c42 <__sflush_r+0x1a>
 8004cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d002      	beq.n	8004cba <__sflush_r+0x92>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f9d5 	bl	8005064 <_free_r>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8004cbe:	e7c1      	b.n	8004c44 <__sflush_r+0x1c>
 8004cc0:	6a21      	ldr	r1, [r4, #32]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b0      	blx	r6
 8004cc8:	1c41      	adds	r1, r0, #1
 8004cca:	d1c7      	bne.n	8004c5c <__sflush_r+0x34>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0c4      	beq.n	8004c5c <__sflush_r+0x34>
 8004cd2:	2b1d      	cmp	r3, #29
 8004cd4:	d001      	beq.n	8004cda <__sflush_r+0xb2>
 8004cd6:	2b16      	cmp	r3, #22
 8004cd8:	d101      	bne.n	8004cde <__sflush_r+0xb6>
 8004cda:	602f      	str	r7, [r5, #0]
 8004cdc:	e7b1      	b.n	8004c42 <__sflush_r+0x1a>
 8004cde:	89a3      	ldrh	r3, [r4, #12]
 8004ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	e7ad      	b.n	8004c44 <__sflush_r+0x1c>
 8004ce8:	690f      	ldr	r7, [r1, #16]
 8004cea:	2f00      	cmp	r7, #0
 8004cec:	d0a9      	beq.n	8004c42 <__sflush_r+0x1a>
 8004cee:	0793      	lsls	r3, r2, #30
 8004cf0:	680e      	ldr	r6, [r1, #0]
 8004cf2:	bf08      	it	eq
 8004cf4:	694b      	ldreq	r3, [r1, #20]
 8004cf6:	600f      	str	r7, [r1, #0]
 8004cf8:	bf18      	it	ne
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	eba6 0807 	sub.w	r8, r6, r7
 8004d00:	608b      	str	r3, [r1, #8]
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	dd9c      	ble.n	8004c42 <__sflush_r+0x1a>
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	463a      	mov	r2, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b0      	blx	r6
 8004d14:	2800      	cmp	r0, #0
 8004d16:	dc06      	bgt.n	8004d26 <__sflush_r+0xfe>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	e78e      	b.n	8004c44 <__sflush_r+0x1c>
 8004d26:	4407      	add	r7, r0
 8004d28:	eba8 0800 	sub.w	r8, r8, r0
 8004d2c:	e7e9      	b.n	8004d02 <__sflush_r+0xda>
 8004d2e:	bf00      	nop
 8004d30:	20400001 	.word	0x20400001

08004d34 <_fflush_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b913      	cbnz	r3, 8004d44 <_fflush_r+0x10>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	4628      	mov	r0, r5
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	b118      	cbz	r0, 8004d4e <_fflush_r+0x1a>
 8004d46:	6983      	ldr	r3, [r0, #24]
 8004d48:	b90b      	cbnz	r3, 8004d4e <_fflush_r+0x1a>
 8004d4a:	f000 f887 	bl	8004e5c <__sinit>
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <_fflush_r+0x6c>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d11b      	bne.n	8004d8c <_fflush_r+0x58>
 8004d54:	686c      	ldr	r4, [r5, #4]
 8004d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0ef      	beq.n	8004d3e <_fflush_r+0xa>
 8004d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d60:	07d0      	lsls	r0, r2, #31
 8004d62:	d404      	bmi.n	8004d6e <_fflush_r+0x3a>
 8004d64:	0599      	lsls	r1, r3, #22
 8004d66:	d402      	bmi.n	8004d6e <_fflush_r+0x3a>
 8004d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6a:	f000 f915 	bl	8004f98 <__retarget_lock_acquire_recursive>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7ff ff59 	bl	8004c28 <__sflush_r>
 8004d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d78:	07da      	lsls	r2, r3, #31
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	d4e0      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	059b      	lsls	r3, r3, #22
 8004d82:	d4dd      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d86:	f000 f908 	bl	8004f9a <__retarget_lock_release_recursive>
 8004d8a:	e7d9      	b.n	8004d40 <_fflush_r+0xc>
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_fflush_r+0x70>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d101      	bne.n	8004d96 <_fflush_r+0x62>
 8004d92:	68ac      	ldr	r4, [r5, #8]
 8004d94:	e7df      	b.n	8004d56 <_fflush_r+0x22>
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <_fflush_r+0x74>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	bf08      	it	eq
 8004d9c:	68ec      	ldreq	r4, [r5, #12]
 8004d9e:	e7da      	b.n	8004d56 <_fflush_r+0x22>
 8004da0:	08005b40 	.word	0x08005b40
 8004da4:	08005b60 	.word	0x08005b60
 8004da8:	08005b20 	.word	0x08005b20

08004dac <std>:
 8004dac:	2300      	movs	r3, #0
 8004dae:	b510      	push	{r4, lr}
 8004db0:	4604      	mov	r4, r0
 8004db2:	e9c0 3300 	strd	r3, r3, [r0]
 8004db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dba:	6083      	str	r3, [r0, #8]
 8004dbc:	8181      	strh	r1, [r0, #12]
 8004dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc0:	81c2      	strh	r2, [r0, #14]
 8004dc2:	6183      	str	r3, [r0, #24]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	305c      	adds	r0, #92	; 0x5c
 8004dca:	f7ff fdcf 	bl	800496c <memset>
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x38>)
 8004dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <std+0x3c>)
 8004dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x40>)
 8004dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x44>)
 8004ddc:	6224      	str	r4, [r4, #32]
 8004dde:	6323      	str	r3, [r4, #48]	; 0x30
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	bf00      	nop
 8004de4:	080057b9 	.word	0x080057b9
 8004de8:	080057db 	.word	0x080057db
 8004dec:	08005813 	.word	0x08005813
 8004df0:	08005837 	.word	0x08005837

08004df4 <_cleanup_r>:
 8004df4:	4901      	ldr	r1, [pc, #4]	; (8004dfc <_cleanup_r+0x8>)
 8004df6:	f000 b8af 	b.w	8004f58 <_fwalk_reent>
 8004dfa:	bf00      	nop
 8004dfc:	08004d35 	.word	0x08004d35

08004e00 <__sfmoreglue>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	1e4a      	subs	r2, r1, #1
 8004e04:	2568      	movs	r5, #104	; 0x68
 8004e06:	4355      	muls	r5, r2
 8004e08:	460e      	mov	r6, r1
 8004e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e0e:	f000 f979 	bl	8005104 <_malloc_r>
 8004e12:	4604      	mov	r4, r0
 8004e14:	b140      	cbz	r0, 8004e28 <__sfmoreglue+0x28>
 8004e16:	2100      	movs	r1, #0
 8004e18:	e9c0 1600 	strd	r1, r6, [r0]
 8004e1c:	300c      	adds	r0, #12
 8004e1e:	60a0      	str	r0, [r4, #8]
 8004e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e24:	f7ff fda2 	bl	800496c <memset>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}

08004e2c <__sfp_lock_acquire>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__sfp_lock_acquire+0x8>)
 8004e2e:	f000 b8b3 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 8004e32:	bf00      	nop
 8004e34:	200001a0 	.word	0x200001a0

08004e38 <__sfp_lock_release>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sfp_lock_release+0x8>)
 8004e3a:	f000 b8ae 	b.w	8004f9a <__retarget_lock_release_recursive>
 8004e3e:	bf00      	nop
 8004e40:	200001a0 	.word	0x200001a0

08004e44 <__sinit_lock_acquire>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__sinit_lock_acquire+0x8>)
 8004e46:	f000 b8a7 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	2000019b 	.word	0x2000019b

08004e50 <__sinit_lock_release>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sinit_lock_release+0x8>)
 8004e52:	f000 b8a2 	b.w	8004f9a <__retarget_lock_release_recursive>
 8004e56:	bf00      	nop
 8004e58:	2000019b 	.word	0x2000019b

08004e5c <__sinit>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f7ff fff0 	bl	8004e44 <__sinit_lock_acquire>
 8004e64:	69a3      	ldr	r3, [r4, #24]
 8004e66:	b11b      	cbz	r3, 8004e70 <__sinit+0x14>
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f7ff bff0 	b.w	8004e50 <__sinit_lock_release>
 8004e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e74:	6523      	str	r3, [r4, #80]	; 0x50
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <__sinit+0x68>)
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <__sinit+0x6c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	bf04      	itt	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	61a3      	streq	r3, [r4, #24]
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 f820 	bl	8004ecc <__sfp>
 8004e8c:	6060      	str	r0, [r4, #4]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f81c 	bl	8004ecc <__sfp>
 8004e94:	60a0      	str	r0, [r4, #8]
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f818 	bl	8004ecc <__sfp>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60e0      	str	r0, [r4, #12]
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	6860      	ldr	r0, [r4, #4]
 8004ea4:	f7ff ff82 	bl	8004dac <std>
 8004ea8:	68a0      	ldr	r0, [r4, #8]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2109      	movs	r1, #9
 8004eae:	f7ff ff7d 	bl	8004dac <std>
 8004eb2:	68e0      	ldr	r0, [r4, #12]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	2112      	movs	r1, #18
 8004eb8:	f7ff ff78 	bl	8004dac <std>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61a3      	str	r3, [r4, #24]
 8004ec0:	e7d2      	b.n	8004e68 <__sinit+0xc>
 8004ec2:	bf00      	nop
 8004ec4:	08005b1c 	.word	0x08005b1c
 8004ec8:	08004df5 	.word	0x08004df5

08004ecc <__sfp>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	4607      	mov	r7, r0
 8004ed0:	f7ff ffac 	bl	8004e2c <__sfp_lock_acquire>
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <__sfp+0x84>)
 8004ed6:	681e      	ldr	r6, [r3, #0]
 8004ed8:	69b3      	ldr	r3, [r6, #24]
 8004eda:	b913      	cbnz	r3, 8004ee2 <__sfp+0x16>
 8004edc:	4630      	mov	r0, r6
 8004ede:	f7ff ffbd 	bl	8004e5c <__sinit>
 8004ee2:	3648      	adds	r6, #72	; 0x48
 8004ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	d503      	bpl.n	8004ef4 <__sfp+0x28>
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	b30b      	cbz	r3, 8004f34 <__sfp+0x68>
 8004ef0:	6836      	ldr	r6, [r6, #0]
 8004ef2:	e7f7      	b.n	8004ee4 <__sfp+0x18>
 8004ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ef8:	b9d5      	cbnz	r5, 8004f30 <__sfp+0x64>
 8004efa:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <__sfp+0x88>)
 8004efc:	60e3      	str	r3, [r4, #12]
 8004efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f02:	6665      	str	r5, [r4, #100]	; 0x64
 8004f04:	f000 f847 	bl	8004f96 <__retarget_lock_init_recursive>
 8004f08:	f7ff ff96 	bl	8004e38 <__sfp_lock_release>
 8004f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f14:	6025      	str	r5, [r4, #0]
 8004f16:	61a5      	str	r5, [r4, #24]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f20:	f7ff fd24 	bl	800496c <memset>
 8004f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	3468      	adds	r4, #104	; 0x68
 8004f32:	e7d9      	b.n	8004ee8 <__sfp+0x1c>
 8004f34:	2104      	movs	r1, #4
 8004f36:	4638      	mov	r0, r7
 8004f38:	f7ff ff62 	bl	8004e00 <__sfmoreglue>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	6030      	str	r0, [r6, #0]
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1d5      	bne.n	8004ef0 <__sfp+0x24>
 8004f44:	f7ff ff78 	bl	8004e38 <__sfp_lock_release>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	e7ee      	b.n	8004f2c <__sfp+0x60>
 8004f4e:	bf00      	nop
 8004f50:	08005b1c 	.word	0x08005b1c
 8004f54:	ffff0001 	.word	0xffff0001

08004f58 <_fwalk_reent>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	4688      	mov	r8, r1
 8004f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f64:	2700      	movs	r7, #0
 8004f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f6e:	d505      	bpl.n	8004f7c <_fwalk_reent+0x24>
 8004f70:	6824      	ldr	r4, [r4, #0]
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	d1f7      	bne.n	8004f66 <_fwalk_reent+0xe>
 8004f76:	4638      	mov	r0, r7
 8004f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f7c:	89ab      	ldrh	r3, [r5, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d907      	bls.n	8004f92 <_fwalk_reent+0x3a>
 8004f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f86:	3301      	adds	r3, #1
 8004f88:	d003      	beq.n	8004f92 <_fwalk_reent+0x3a>
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	47c0      	blx	r8
 8004f90:	4307      	orrs	r7, r0
 8004f92:	3568      	adds	r5, #104	; 0x68
 8004f94:	e7e9      	b.n	8004f6a <_fwalk_reent+0x12>

08004f96 <__retarget_lock_init_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <__retarget_lock_acquire_recursive>:
 8004f98:	4770      	bx	lr

08004f9a <__retarget_lock_release_recursive>:
 8004f9a:	4770      	bx	lr

08004f9c <__swhatbuf_r>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	b096      	sub	sp, #88	; 0x58
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	da07      	bge.n	8004fbe <__swhatbuf_r+0x22>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	89b3      	ldrh	r3, [r6, #12]
 8004fb4:	061a      	lsls	r2, r3, #24
 8004fb6:	d410      	bmi.n	8004fda <__swhatbuf_r+0x3e>
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	e00e      	b.n	8004fdc <__swhatbuf_r+0x40>
 8004fbe:	466a      	mov	r2, sp
 8004fc0:	f000 fc60 	bl	8005884 <_fstat_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	dbf2      	blt.n	8004fae <__swhatbuf_r+0x12>
 8004fc8:	9a01      	ldr	r2, [sp, #4]
 8004fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fd2:	425a      	negs	r2, r3
 8004fd4:	415a      	adcs	r2, r3
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	e7ee      	b.n	8004fb8 <__swhatbuf_r+0x1c>
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	2000      	movs	r0, #0
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	b016      	add	sp, #88	; 0x58
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}

08004fe4 <__smakebuf_r>:
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe8:	079d      	lsls	r5, r3, #30
 8004fea:	4606      	mov	r6, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	d507      	bpl.n	8005000 <__smakebuf_r+0x1c>
 8004ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	6163      	str	r3, [r4, #20]
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	ab01      	add	r3, sp, #4
 8005002:	466a      	mov	r2, sp
 8005004:	f7ff ffca 	bl	8004f9c <__swhatbuf_r>
 8005008:	9900      	ldr	r1, [sp, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f879 	bl	8005104 <_malloc_r>
 8005012:	b948      	cbnz	r0, 8005028 <__smakebuf_r+0x44>
 8005014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d4ef      	bmi.n	8004ffc <__smakebuf_r+0x18>
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	e7e3      	b.n	8004ff0 <__smakebuf_r+0xc>
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <__smakebuf_r+0x7c>)
 800502a:	62b3      	str	r3, [r6, #40]	; 0x28
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	6163      	str	r3, [r4, #20]
 800503a:	9b01      	ldr	r3, [sp, #4]
 800503c:	6120      	str	r0, [r4, #16]
 800503e:	b15b      	cbz	r3, 8005058 <__smakebuf_r+0x74>
 8005040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 fc2f 	bl	80058a8 <_isatty_r>
 800504a:	b128      	cbz	r0, 8005058 <__smakebuf_r+0x74>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	89a0      	ldrh	r0, [r4, #12]
 800505a:	4305      	orrs	r5, r0
 800505c:	81a5      	strh	r5, [r4, #12]
 800505e:	e7cd      	b.n	8004ffc <__smakebuf_r+0x18>
 8005060:	08004df5 	.word	0x08004df5

08005064 <_free_r>:
 8005064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005066:	2900      	cmp	r1, #0
 8005068:	d048      	beq.n	80050fc <_free_r+0x98>
 800506a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506e:	9001      	str	r0, [sp, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f1a1 0404 	sub.w	r4, r1, #4
 8005076:	bfb8      	it	lt
 8005078:	18e4      	addlt	r4, r4, r3
 800507a:	f000 fc51 	bl	8005920 <__malloc_lock>
 800507e:	4a20      	ldr	r2, [pc, #128]	; (8005100 <_free_r+0x9c>)
 8005080:	9801      	ldr	r0, [sp, #4]
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	4615      	mov	r5, r2
 8005086:	b933      	cbnz	r3, 8005096 <_free_r+0x32>
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	6014      	str	r4, [r2, #0]
 800508c:	b003      	add	sp, #12
 800508e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005092:	f000 bc4b 	b.w	800592c <__malloc_unlock>
 8005096:	42a3      	cmp	r3, r4
 8005098:	d90b      	bls.n	80050b2 <_free_r+0x4e>
 800509a:	6821      	ldr	r1, [r4, #0]
 800509c:	1862      	adds	r2, r4, r1
 800509e:	4293      	cmp	r3, r2
 80050a0:	bf04      	itt	eq
 80050a2:	681a      	ldreq	r2, [r3, #0]
 80050a4:	685b      	ldreq	r3, [r3, #4]
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	bf04      	itt	eq
 80050aa:	1852      	addeq	r2, r2, r1
 80050ac:	6022      	streq	r2, [r4, #0]
 80050ae:	602c      	str	r4, [r5, #0]
 80050b0:	e7ec      	b.n	800508c <_free_r+0x28>
 80050b2:	461a      	mov	r2, r3
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	b10b      	cbz	r3, 80050bc <_free_r+0x58>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d9fa      	bls.n	80050b2 <_free_r+0x4e>
 80050bc:	6811      	ldr	r1, [r2, #0]
 80050be:	1855      	adds	r5, r2, r1
 80050c0:	42a5      	cmp	r5, r4
 80050c2:	d10b      	bne.n	80050dc <_free_r+0x78>
 80050c4:	6824      	ldr	r4, [r4, #0]
 80050c6:	4421      	add	r1, r4
 80050c8:	1854      	adds	r4, r2, r1
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	d1dd      	bne.n	800508c <_free_r+0x28>
 80050d0:	681c      	ldr	r4, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	6053      	str	r3, [r2, #4]
 80050d6:	4421      	add	r1, r4
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	e7d7      	b.n	800508c <_free_r+0x28>
 80050dc:	d902      	bls.n	80050e4 <_free_r+0x80>
 80050de:	230c      	movs	r3, #12
 80050e0:	6003      	str	r3, [r0, #0]
 80050e2:	e7d3      	b.n	800508c <_free_r+0x28>
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	1961      	adds	r1, r4, r5
 80050e8:	428b      	cmp	r3, r1
 80050ea:	bf04      	itt	eq
 80050ec:	6819      	ldreq	r1, [r3, #0]
 80050ee:	685b      	ldreq	r3, [r3, #4]
 80050f0:	6063      	str	r3, [r4, #4]
 80050f2:	bf04      	itt	eq
 80050f4:	1949      	addeq	r1, r1, r5
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	6054      	str	r4, [r2, #4]
 80050fa:	e7c7      	b.n	800508c <_free_r+0x28>
 80050fc:	b003      	add	sp, #12
 80050fe:	bd30      	pop	{r4, r5, pc}
 8005100:	200000e4 	.word	0x200000e4

08005104 <_malloc_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	1ccd      	adds	r5, r1, #3
 8005108:	f025 0503 	bic.w	r5, r5, #3
 800510c:	3508      	adds	r5, #8
 800510e:	2d0c      	cmp	r5, #12
 8005110:	bf38      	it	cc
 8005112:	250c      	movcc	r5, #12
 8005114:	2d00      	cmp	r5, #0
 8005116:	4606      	mov	r6, r0
 8005118:	db01      	blt.n	800511e <_malloc_r+0x1a>
 800511a:	42a9      	cmp	r1, r5
 800511c:	d903      	bls.n	8005126 <_malloc_r+0x22>
 800511e:	230c      	movs	r3, #12
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	2000      	movs	r0, #0
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005126:	f000 fbfb 	bl	8005920 <__malloc_lock>
 800512a:	4921      	ldr	r1, [pc, #132]	; (80051b0 <_malloc_r+0xac>)
 800512c:	680a      	ldr	r2, [r1, #0]
 800512e:	4614      	mov	r4, r2
 8005130:	b99c      	cbnz	r4, 800515a <_malloc_r+0x56>
 8005132:	4f20      	ldr	r7, [pc, #128]	; (80051b4 <_malloc_r+0xb0>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	b923      	cbnz	r3, 8005142 <_malloc_r+0x3e>
 8005138:	4621      	mov	r1, r4
 800513a:	4630      	mov	r0, r6
 800513c:	f000 fb2c 	bl	8005798 <_sbrk_r>
 8005140:	6038      	str	r0, [r7, #0]
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f000 fb27 	bl	8005798 <_sbrk_r>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d123      	bne.n	8005196 <_malloc_r+0x92>
 800514e:	230c      	movs	r3, #12
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	4630      	mov	r0, r6
 8005154:	f000 fbea 	bl	800592c <__malloc_unlock>
 8005158:	e7e3      	b.n	8005122 <_malloc_r+0x1e>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	1b5b      	subs	r3, r3, r5
 800515e:	d417      	bmi.n	8005190 <_malloc_r+0x8c>
 8005160:	2b0b      	cmp	r3, #11
 8005162:	d903      	bls.n	800516c <_malloc_r+0x68>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	441c      	add	r4, r3
 8005168:	6025      	str	r5, [r4, #0]
 800516a:	e004      	b.n	8005176 <_malloc_r+0x72>
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	42a2      	cmp	r2, r4
 8005170:	bf0c      	ite	eq
 8005172:	600b      	streq	r3, [r1, #0]
 8005174:	6053      	strne	r3, [r2, #4]
 8005176:	4630      	mov	r0, r6
 8005178:	f000 fbd8 	bl	800592c <__malloc_unlock>
 800517c:	f104 000b 	add.w	r0, r4, #11
 8005180:	1d23      	adds	r3, r4, #4
 8005182:	f020 0007 	bic.w	r0, r0, #7
 8005186:	1ac2      	subs	r2, r0, r3
 8005188:	d0cc      	beq.n	8005124 <_malloc_r+0x20>
 800518a:	1a1b      	subs	r3, r3, r0
 800518c:	50a3      	str	r3, [r4, r2]
 800518e:	e7c9      	b.n	8005124 <_malloc_r+0x20>
 8005190:	4622      	mov	r2, r4
 8005192:	6864      	ldr	r4, [r4, #4]
 8005194:	e7cc      	b.n	8005130 <_malloc_r+0x2c>
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d0e3      	beq.n	8005168 <_malloc_r+0x64>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 faf8 	bl	8005798 <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1dd      	bne.n	8005168 <_malloc_r+0x64>
 80051ac:	e7cf      	b.n	800514e <_malloc_r+0x4a>
 80051ae:	bf00      	nop
 80051b0:	200000e4 	.word	0x200000e4
 80051b4:	200000e8 	.word	0x200000e8

080051b8 <__ssputs_r>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	688e      	ldr	r6, [r1, #8]
 80051be:	429e      	cmp	r6, r3
 80051c0:	4682      	mov	sl, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4690      	mov	r8, r2
 80051c6:	461f      	mov	r7, r3
 80051c8:	d838      	bhi.n	800523c <__ssputs_r+0x84>
 80051ca:	898a      	ldrh	r2, [r1, #12]
 80051cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051d0:	d032      	beq.n	8005238 <__ssputs_r+0x80>
 80051d2:	6825      	ldr	r5, [r4, #0]
 80051d4:	6909      	ldr	r1, [r1, #16]
 80051d6:	eba5 0901 	sub.w	r9, r5, r1
 80051da:	6965      	ldr	r5, [r4, #20]
 80051dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051e4:	3301      	adds	r3, #1
 80051e6:	444b      	add	r3, r9
 80051e8:	106d      	asrs	r5, r5, #1
 80051ea:	429d      	cmp	r5, r3
 80051ec:	bf38      	it	cc
 80051ee:	461d      	movcc	r5, r3
 80051f0:	0553      	lsls	r3, r2, #21
 80051f2:	d531      	bpl.n	8005258 <__ssputs_r+0xa0>
 80051f4:	4629      	mov	r1, r5
 80051f6:	f7ff ff85 	bl	8005104 <_malloc_r>
 80051fa:	4606      	mov	r6, r0
 80051fc:	b950      	cbnz	r0, 8005214 <__ssputs_r+0x5c>
 80051fe:	230c      	movs	r3, #12
 8005200:	f8ca 3000 	str.w	r3, [sl]
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	6921      	ldr	r1, [r4, #16]
 8005216:	464a      	mov	r2, r9
 8005218:	f7ff fb9a 	bl	8004950 <memcpy>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	6126      	str	r6, [r4, #16]
 800522a:	6165      	str	r5, [r4, #20]
 800522c:	444e      	add	r6, r9
 800522e:	eba5 0509 	sub.w	r5, r5, r9
 8005232:	6026      	str	r6, [r4, #0]
 8005234:	60a5      	str	r5, [r4, #8]
 8005236:	463e      	mov	r6, r7
 8005238:	42be      	cmp	r6, r7
 800523a:	d900      	bls.n	800523e <__ssputs_r+0x86>
 800523c:	463e      	mov	r6, r7
 800523e:	4632      	mov	r2, r6
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	4641      	mov	r1, r8
 8005244:	f000 fb52 	bl	80058ec <memmove>
 8005248:	68a3      	ldr	r3, [r4, #8]
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	1b9b      	subs	r3, r3, r6
 800524e:	4432      	add	r2, r6
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	2000      	movs	r0, #0
 8005256:	e7db      	b.n	8005210 <__ssputs_r+0x58>
 8005258:	462a      	mov	r2, r5
 800525a:	f000 fb6d 	bl	8005938 <_realloc_r>
 800525e:	4606      	mov	r6, r0
 8005260:	2800      	cmp	r0, #0
 8005262:	d1e1      	bne.n	8005228 <__ssputs_r+0x70>
 8005264:	6921      	ldr	r1, [r4, #16]
 8005266:	4650      	mov	r0, sl
 8005268:	f7ff fefc 	bl	8005064 <_free_r>
 800526c:	e7c7      	b.n	80051fe <__ssputs_r+0x46>
	...

08005270 <_svfiprintf_r>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	4698      	mov	r8, r3
 8005276:	898b      	ldrh	r3, [r1, #12]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	b09d      	sub	sp, #116	; 0x74
 800527c:	4607      	mov	r7, r0
 800527e:	460d      	mov	r5, r1
 8005280:	4614      	mov	r4, r2
 8005282:	d50e      	bpl.n	80052a2 <_svfiprintf_r+0x32>
 8005284:	690b      	ldr	r3, [r1, #16]
 8005286:	b963      	cbnz	r3, 80052a2 <_svfiprintf_r+0x32>
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	f7ff ff3b 	bl	8005104 <_malloc_r>
 800528e:	6028      	str	r0, [r5, #0]
 8005290:	6128      	str	r0, [r5, #16]
 8005292:	b920      	cbnz	r0, 800529e <_svfiprintf_r+0x2e>
 8005294:	230c      	movs	r3, #12
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	e0d1      	b.n	8005442 <_svfiprintf_r+0x1d2>
 800529e:	2340      	movs	r3, #64	; 0x40
 80052a0:	616b      	str	r3, [r5, #20]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	2320      	movs	r3, #32
 80052a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80052b0:	2330      	movs	r3, #48	; 0x30
 80052b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800545c <_svfiprintf_r+0x1ec>
 80052b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ba:	f04f 0901 	mov.w	r9, #1
 80052be:	4623      	mov	r3, r4
 80052c0:	469a      	mov	sl, r3
 80052c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052c6:	b10a      	cbz	r2, 80052cc <_svfiprintf_r+0x5c>
 80052c8:	2a25      	cmp	r2, #37	; 0x25
 80052ca:	d1f9      	bne.n	80052c0 <_svfiprintf_r+0x50>
 80052cc:	ebba 0b04 	subs.w	fp, sl, r4
 80052d0:	d00b      	beq.n	80052ea <_svfiprintf_r+0x7a>
 80052d2:	465b      	mov	r3, fp
 80052d4:	4622      	mov	r2, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	4638      	mov	r0, r7
 80052da:	f7ff ff6d 	bl	80051b8 <__ssputs_r>
 80052de:	3001      	adds	r0, #1
 80052e0:	f000 80aa 	beq.w	8005438 <_svfiprintf_r+0x1c8>
 80052e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052e6:	445a      	add	r2, fp
 80052e8:	9209      	str	r2, [sp, #36]	; 0x24
 80052ea:	f89a 3000 	ldrb.w	r3, [sl]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80a2 	beq.w	8005438 <_svfiprintf_r+0x1c8>
 80052f4:	2300      	movs	r3, #0
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052fe:	f10a 0a01 	add.w	sl, sl, #1
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	9307      	str	r3, [sp, #28]
 8005306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800530a:	931a      	str	r3, [sp, #104]	; 0x68
 800530c:	4654      	mov	r4, sl
 800530e:	2205      	movs	r2, #5
 8005310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005314:	4851      	ldr	r0, [pc, #324]	; (800545c <_svfiprintf_r+0x1ec>)
 8005316:	f7fa ff6b 	bl	80001f0 <memchr>
 800531a:	9a04      	ldr	r2, [sp, #16]
 800531c:	b9d8      	cbnz	r0, 8005356 <_svfiprintf_r+0xe6>
 800531e:	06d0      	lsls	r0, r2, #27
 8005320:	bf44      	itt	mi
 8005322:	2320      	movmi	r3, #32
 8005324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005328:	0711      	lsls	r1, r2, #28
 800532a:	bf44      	itt	mi
 800532c:	232b      	movmi	r3, #43	; 0x2b
 800532e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005332:	f89a 3000 	ldrb.w	r3, [sl]
 8005336:	2b2a      	cmp	r3, #42	; 0x2a
 8005338:	d015      	beq.n	8005366 <_svfiprintf_r+0xf6>
 800533a:	9a07      	ldr	r2, [sp, #28]
 800533c:	4654      	mov	r4, sl
 800533e:	2000      	movs	r0, #0
 8005340:	f04f 0c0a 	mov.w	ip, #10
 8005344:	4621      	mov	r1, r4
 8005346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800534a:	3b30      	subs	r3, #48	; 0x30
 800534c:	2b09      	cmp	r3, #9
 800534e:	d94e      	bls.n	80053ee <_svfiprintf_r+0x17e>
 8005350:	b1b0      	cbz	r0, 8005380 <_svfiprintf_r+0x110>
 8005352:	9207      	str	r2, [sp, #28]
 8005354:	e014      	b.n	8005380 <_svfiprintf_r+0x110>
 8005356:	eba0 0308 	sub.w	r3, r0, r8
 800535a:	fa09 f303 	lsl.w	r3, r9, r3
 800535e:	4313      	orrs	r3, r2
 8005360:	9304      	str	r3, [sp, #16]
 8005362:	46a2      	mov	sl, r4
 8005364:	e7d2      	b.n	800530c <_svfiprintf_r+0x9c>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	1d19      	adds	r1, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9103      	str	r1, [sp, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfbb      	ittet	lt
 8005372:	425b      	neglt	r3, r3
 8005374:	f042 0202 	orrlt.w	r2, r2, #2
 8005378:	9307      	strge	r3, [sp, #28]
 800537a:	9307      	strlt	r3, [sp, #28]
 800537c:	bfb8      	it	lt
 800537e:	9204      	strlt	r2, [sp, #16]
 8005380:	7823      	ldrb	r3, [r4, #0]
 8005382:	2b2e      	cmp	r3, #46	; 0x2e
 8005384:	d10c      	bne.n	80053a0 <_svfiprintf_r+0x130>
 8005386:	7863      	ldrb	r3, [r4, #1]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d135      	bne.n	80053f8 <_svfiprintf_r+0x188>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	9203      	str	r2, [sp, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfb8      	it	lt
 8005398:	f04f 33ff 	movlt.w	r3, #4294967295
 800539c:	3402      	adds	r4, #2
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800546c <_svfiprintf_r+0x1fc>
 80053a4:	7821      	ldrb	r1, [r4, #0]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4650      	mov	r0, sl
 80053aa:	f7fa ff21 	bl	80001f0 <memchr>
 80053ae:	b140      	cbz	r0, 80053c2 <_svfiprintf_r+0x152>
 80053b0:	2340      	movs	r3, #64	; 0x40
 80053b2:	eba0 000a 	sub.w	r0, r0, sl
 80053b6:	fa03 f000 	lsl.w	r0, r3, r0
 80053ba:	9b04      	ldr	r3, [sp, #16]
 80053bc:	4303      	orrs	r3, r0
 80053be:	3401      	adds	r4, #1
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c6:	4826      	ldr	r0, [pc, #152]	; (8005460 <_svfiprintf_r+0x1f0>)
 80053c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053cc:	2206      	movs	r2, #6
 80053ce:	f7fa ff0f 	bl	80001f0 <memchr>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d038      	beq.n	8005448 <_svfiprintf_r+0x1d8>
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <_svfiprintf_r+0x1f4>)
 80053d8:	bb1b      	cbnz	r3, 8005422 <_svfiprintf_r+0x1b2>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	3307      	adds	r3, #7
 80053de:	f023 0307 	bic.w	r3, r3, #7
 80053e2:	3308      	adds	r3, #8
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e8:	4433      	add	r3, r6
 80053ea:	9309      	str	r3, [sp, #36]	; 0x24
 80053ec:	e767      	b.n	80052be <_svfiprintf_r+0x4e>
 80053ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f2:	460c      	mov	r4, r1
 80053f4:	2001      	movs	r0, #1
 80053f6:	e7a5      	b.n	8005344 <_svfiprintf_r+0xd4>
 80053f8:	2300      	movs	r3, #0
 80053fa:	3401      	adds	r4, #1
 80053fc:	9305      	str	r3, [sp, #20]
 80053fe:	4619      	mov	r1, r3
 8005400:	f04f 0c0a 	mov.w	ip, #10
 8005404:	4620      	mov	r0, r4
 8005406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800540a:	3a30      	subs	r2, #48	; 0x30
 800540c:	2a09      	cmp	r2, #9
 800540e:	d903      	bls.n	8005418 <_svfiprintf_r+0x1a8>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0c5      	beq.n	80053a0 <_svfiprintf_r+0x130>
 8005414:	9105      	str	r1, [sp, #20]
 8005416:	e7c3      	b.n	80053a0 <_svfiprintf_r+0x130>
 8005418:	fb0c 2101 	mla	r1, ip, r1, r2
 800541c:	4604      	mov	r4, r0
 800541e:	2301      	movs	r3, #1
 8005420:	e7f0      	b.n	8005404 <_svfiprintf_r+0x194>
 8005422:	ab03      	add	r3, sp, #12
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	462a      	mov	r2, r5
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <_svfiprintf_r+0x1f8>)
 800542a:	a904      	add	r1, sp, #16
 800542c:	4638      	mov	r0, r7
 800542e:	f3af 8000 	nop.w
 8005432:	1c42      	adds	r2, r0, #1
 8005434:	4606      	mov	r6, r0
 8005436:	d1d6      	bne.n	80053e6 <_svfiprintf_r+0x176>
 8005438:	89ab      	ldrh	r3, [r5, #12]
 800543a:	065b      	lsls	r3, r3, #25
 800543c:	f53f af2c 	bmi.w	8005298 <_svfiprintf_r+0x28>
 8005440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005442:	b01d      	add	sp, #116	; 0x74
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	ab03      	add	r3, sp, #12
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	462a      	mov	r2, r5
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <_svfiprintf_r+0x1f8>)
 8005450:	a904      	add	r1, sp, #16
 8005452:	4638      	mov	r0, r7
 8005454:	f000 f87a 	bl	800554c <_printf_i>
 8005458:	e7eb      	b.n	8005432 <_svfiprintf_r+0x1c2>
 800545a:	bf00      	nop
 800545c:	08005b80 	.word	0x08005b80
 8005460:	08005b8a 	.word	0x08005b8a
 8005464:	00000000 	.word	0x00000000
 8005468:	080051b9 	.word	0x080051b9
 800546c:	08005b86 	.word	0x08005b86

08005470 <_printf_common>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	4616      	mov	r6, r2
 8005476:	4699      	mov	r9, r3
 8005478:	688a      	ldr	r2, [r1, #8]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005480:	4293      	cmp	r3, r2
 8005482:	bfb8      	it	lt
 8005484:	4613      	movlt	r3, r2
 8005486:	6033      	str	r3, [r6, #0]
 8005488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800548c:	4607      	mov	r7, r0
 800548e:	460c      	mov	r4, r1
 8005490:	b10a      	cbz	r2, 8005496 <_printf_common+0x26>
 8005492:	3301      	adds	r3, #1
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	0699      	lsls	r1, r3, #26
 800549a:	bf42      	ittt	mi
 800549c:	6833      	ldrmi	r3, [r6, #0]
 800549e:	3302      	addmi	r3, #2
 80054a0:	6033      	strmi	r3, [r6, #0]
 80054a2:	6825      	ldr	r5, [r4, #0]
 80054a4:	f015 0506 	ands.w	r5, r5, #6
 80054a8:	d106      	bne.n	80054b8 <_printf_common+0x48>
 80054aa:	f104 0a19 	add.w	sl, r4, #25
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	6832      	ldr	r2, [r6, #0]
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	dc26      	bgt.n	8005506 <_printf_common+0x96>
 80054b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054bc:	1e13      	subs	r3, r2, #0
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	bf18      	it	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	0692      	lsls	r2, r2, #26
 80054c6:	d42b      	bmi.n	8005520 <_printf_common+0xb0>
 80054c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d01e      	beq.n	8005514 <_printf_common+0xa4>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	68e5      	ldr	r5, [r4, #12]
 80054da:	6832      	ldr	r2, [r6, #0]
 80054dc:	f003 0306 	and.w	r3, r3, #6
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	bf08      	it	eq
 80054e4:	1aad      	subeq	r5, r5, r2
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	6922      	ldr	r2, [r4, #16]
 80054ea:	bf0c      	ite	eq
 80054ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f0:	2500      	movne	r5, #0
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bfc4      	itt	gt
 80054f6:	1a9b      	subgt	r3, r3, r2
 80054f8:	18ed      	addgt	r5, r5, r3
 80054fa:	2600      	movs	r6, #0
 80054fc:	341a      	adds	r4, #26
 80054fe:	42b5      	cmp	r5, r6
 8005500:	d11a      	bne.n	8005538 <_printf_common+0xc8>
 8005502:	2000      	movs	r0, #0
 8005504:	e008      	b.n	8005518 <_printf_common+0xa8>
 8005506:	2301      	movs	r3, #1
 8005508:	4652      	mov	r2, sl
 800550a:	4649      	mov	r1, r9
 800550c:	4638      	mov	r0, r7
 800550e:	47c0      	blx	r8
 8005510:	3001      	adds	r0, #1
 8005512:	d103      	bne.n	800551c <_printf_common+0xac>
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551c:	3501      	adds	r5, #1
 800551e:	e7c6      	b.n	80054ae <_printf_common+0x3e>
 8005520:	18e1      	adds	r1, r4, r3
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	2030      	movs	r0, #48	; 0x30
 8005526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800552a:	4422      	add	r2, r4
 800552c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005534:	3302      	adds	r3, #2
 8005536:	e7c7      	b.n	80054c8 <_printf_common+0x58>
 8005538:	2301      	movs	r3, #1
 800553a:	4622      	mov	r2, r4
 800553c:	4649      	mov	r1, r9
 800553e:	4638      	mov	r0, r7
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d0e6      	beq.n	8005514 <_printf_common+0xa4>
 8005546:	3601      	adds	r6, #1
 8005548:	e7d9      	b.n	80054fe <_printf_common+0x8e>
	...

0800554c <_printf_i>:
 800554c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	460c      	mov	r4, r1
 8005552:	4691      	mov	r9, r2
 8005554:	7e27      	ldrb	r7, [r4, #24]
 8005556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005558:	2f78      	cmp	r7, #120	; 0x78
 800555a:	4680      	mov	r8, r0
 800555c:	469a      	mov	sl, r3
 800555e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005562:	d807      	bhi.n	8005574 <_printf_i+0x28>
 8005564:	2f62      	cmp	r7, #98	; 0x62
 8005566:	d80a      	bhi.n	800557e <_printf_i+0x32>
 8005568:	2f00      	cmp	r7, #0
 800556a:	f000 80d8 	beq.w	800571e <_printf_i+0x1d2>
 800556e:	2f58      	cmp	r7, #88	; 0x58
 8005570:	f000 80a3 	beq.w	80056ba <_printf_i+0x16e>
 8005574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800557c:	e03a      	b.n	80055f4 <_printf_i+0xa8>
 800557e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005582:	2b15      	cmp	r3, #21
 8005584:	d8f6      	bhi.n	8005574 <_printf_i+0x28>
 8005586:	a001      	add	r0, pc, #4	; (adr r0, 800558c <_printf_i+0x40>)
 8005588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800558c:	080055e5 	.word	0x080055e5
 8005590:	080055f9 	.word	0x080055f9
 8005594:	08005575 	.word	0x08005575
 8005598:	08005575 	.word	0x08005575
 800559c:	08005575 	.word	0x08005575
 80055a0:	08005575 	.word	0x08005575
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	08005575 	.word	0x08005575
 80055ac:	08005575 	.word	0x08005575
 80055b0:	08005575 	.word	0x08005575
 80055b4:	08005575 	.word	0x08005575
 80055b8:	08005705 	.word	0x08005705
 80055bc:	08005629 	.word	0x08005629
 80055c0:	080056e7 	.word	0x080056e7
 80055c4:	08005575 	.word	0x08005575
 80055c8:	08005575 	.word	0x08005575
 80055cc:	08005727 	.word	0x08005727
 80055d0:	08005575 	.word	0x08005575
 80055d4:	08005629 	.word	0x08005629
 80055d8:	08005575 	.word	0x08005575
 80055dc:	08005575 	.word	0x08005575
 80055e0:	080056ef 	.word	0x080056ef
 80055e4:	680b      	ldr	r3, [r1, #0]
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	600a      	str	r2, [r1, #0]
 80055ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0a3      	b.n	8005740 <_printf_i+0x1f4>
 80055f8:	6825      	ldr	r5, [r4, #0]
 80055fa:	6808      	ldr	r0, [r1, #0]
 80055fc:	062e      	lsls	r6, r5, #24
 80055fe:	f100 0304 	add.w	r3, r0, #4
 8005602:	d50a      	bpl.n	800561a <_printf_i+0xce>
 8005604:	6805      	ldr	r5, [r0, #0]
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	2d00      	cmp	r5, #0
 800560a:	da03      	bge.n	8005614 <_printf_i+0xc8>
 800560c:	232d      	movs	r3, #45	; 0x2d
 800560e:	426d      	negs	r5, r5
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005614:	485e      	ldr	r0, [pc, #376]	; (8005790 <_printf_i+0x244>)
 8005616:	230a      	movs	r3, #10
 8005618:	e019      	b.n	800564e <_printf_i+0x102>
 800561a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800561e:	6805      	ldr	r5, [r0, #0]
 8005620:	600b      	str	r3, [r1, #0]
 8005622:	bf18      	it	ne
 8005624:	b22d      	sxthne	r5, r5
 8005626:	e7ef      	b.n	8005608 <_printf_i+0xbc>
 8005628:	680b      	ldr	r3, [r1, #0]
 800562a:	6825      	ldr	r5, [r4, #0]
 800562c:	1d18      	adds	r0, r3, #4
 800562e:	6008      	str	r0, [r1, #0]
 8005630:	0628      	lsls	r0, r5, #24
 8005632:	d501      	bpl.n	8005638 <_printf_i+0xec>
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	e002      	b.n	800563e <_printf_i+0xf2>
 8005638:	0669      	lsls	r1, r5, #25
 800563a:	d5fb      	bpl.n	8005634 <_printf_i+0xe8>
 800563c:	881d      	ldrh	r5, [r3, #0]
 800563e:	4854      	ldr	r0, [pc, #336]	; (8005790 <_printf_i+0x244>)
 8005640:	2f6f      	cmp	r7, #111	; 0x6f
 8005642:	bf0c      	ite	eq
 8005644:	2308      	moveq	r3, #8
 8005646:	230a      	movne	r3, #10
 8005648:	2100      	movs	r1, #0
 800564a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800564e:	6866      	ldr	r6, [r4, #4]
 8005650:	60a6      	str	r6, [r4, #8]
 8005652:	2e00      	cmp	r6, #0
 8005654:	bfa2      	ittt	ge
 8005656:	6821      	ldrge	r1, [r4, #0]
 8005658:	f021 0104 	bicge.w	r1, r1, #4
 800565c:	6021      	strge	r1, [r4, #0]
 800565e:	b90d      	cbnz	r5, 8005664 <_printf_i+0x118>
 8005660:	2e00      	cmp	r6, #0
 8005662:	d04d      	beq.n	8005700 <_printf_i+0x1b4>
 8005664:	4616      	mov	r6, r2
 8005666:	fbb5 f1f3 	udiv	r1, r5, r3
 800566a:	fb03 5711 	mls	r7, r3, r1, r5
 800566e:	5dc7      	ldrb	r7, [r0, r7]
 8005670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005674:	462f      	mov	r7, r5
 8005676:	42bb      	cmp	r3, r7
 8005678:	460d      	mov	r5, r1
 800567a:	d9f4      	bls.n	8005666 <_printf_i+0x11a>
 800567c:	2b08      	cmp	r3, #8
 800567e:	d10b      	bne.n	8005698 <_printf_i+0x14c>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	07df      	lsls	r7, r3, #31
 8005684:	d508      	bpl.n	8005698 <_printf_i+0x14c>
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	6861      	ldr	r1, [r4, #4]
 800568a:	4299      	cmp	r1, r3
 800568c:	bfde      	ittt	le
 800568e:	2330      	movle	r3, #48	; 0x30
 8005690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005698:	1b92      	subs	r2, r2, r6
 800569a:	6122      	str	r2, [r4, #16]
 800569c:	f8cd a000 	str.w	sl, [sp]
 80056a0:	464b      	mov	r3, r9
 80056a2:	aa03      	add	r2, sp, #12
 80056a4:	4621      	mov	r1, r4
 80056a6:	4640      	mov	r0, r8
 80056a8:	f7ff fee2 	bl	8005470 <_printf_common>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d14c      	bne.n	800574a <_printf_i+0x1fe>
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	b004      	add	sp, #16
 80056b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ba:	4835      	ldr	r0, [pc, #212]	; (8005790 <_printf_i+0x244>)
 80056bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	680e      	ldr	r6, [r1, #0]
 80056c4:	061f      	lsls	r7, r3, #24
 80056c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80056ca:	600e      	str	r6, [r1, #0]
 80056cc:	d514      	bpl.n	80056f8 <_printf_i+0x1ac>
 80056ce:	07d9      	lsls	r1, r3, #31
 80056d0:	bf44      	itt	mi
 80056d2:	f043 0320 	orrmi.w	r3, r3, #32
 80056d6:	6023      	strmi	r3, [r4, #0]
 80056d8:	b91d      	cbnz	r5, 80056e2 <_printf_i+0x196>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	f023 0320 	bic.w	r3, r3, #32
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	2310      	movs	r3, #16
 80056e4:	e7b0      	b.n	8005648 <_printf_i+0xfc>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f043 0320 	orr.w	r3, r3, #32
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	2378      	movs	r3, #120	; 0x78
 80056f0:	4828      	ldr	r0, [pc, #160]	; (8005794 <_printf_i+0x248>)
 80056f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056f6:	e7e3      	b.n	80056c0 <_printf_i+0x174>
 80056f8:	065e      	lsls	r6, r3, #25
 80056fa:	bf48      	it	mi
 80056fc:	b2ad      	uxthmi	r5, r5
 80056fe:	e7e6      	b.n	80056ce <_printf_i+0x182>
 8005700:	4616      	mov	r6, r2
 8005702:	e7bb      	b.n	800567c <_printf_i+0x130>
 8005704:	680b      	ldr	r3, [r1, #0]
 8005706:	6826      	ldr	r6, [r4, #0]
 8005708:	6960      	ldr	r0, [r4, #20]
 800570a:	1d1d      	adds	r5, r3, #4
 800570c:	600d      	str	r5, [r1, #0]
 800570e:	0635      	lsls	r5, r6, #24
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	d501      	bpl.n	8005718 <_printf_i+0x1cc>
 8005714:	6018      	str	r0, [r3, #0]
 8005716:	e002      	b.n	800571e <_printf_i+0x1d2>
 8005718:	0671      	lsls	r1, r6, #25
 800571a:	d5fb      	bpl.n	8005714 <_printf_i+0x1c8>
 800571c:	8018      	strh	r0, [r3, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	4616      	mov	r6, r2
 8005724:	e7ba      	b.n	800569c <_printf_i+0x150>
 8005726:	680b      	ldr	r3, [r1, #0]
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	600a      	str	r2, [r1, #0]
 800572c:	681e      	ldr	r6, [r3, #0]
 800572e:	6862      	ldr	r2, [r4, #4]
 8005730:	2100      	movs	r1, #0
 8005732:	4630      	mov	r0, r6
 8005734:	f7fa fd5c 	bl	80001f0 <memchr>
 8005738:	b108      	cbz	r0, 800573e <_printf_i+0x1f2>
 800573a:	1b80      	subs	r0, r0, r6
 800573c:	6060      	str	r0, [r4, #4]
 800573e:	6863      	ldr	r3, [r4, #4]
 8005740:	6123      	str	r3, [r4, #16]
 8005742:	2300      	movs	r3, #0
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005748:	e7a8      	b.n	800569c <_printf_i+0x150>
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	4632      	mov	r2, r6
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d0ab      	beq.n	80056b0 <_printf_i+0x164>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	079b      	lsls	r3, r3, #30
 800575c:	d413      	bmi.n	8005786 <_printf_i+0x23a>
 800575e:	68e0      	ldr	r0, [r4, #12]
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	4298      	cmp	r0, r3
 8005764:	bfb8      	it	lt
 8005766:	4618      	movlt	r0, r3
 8005768:	e7a4      	b.n	80056b4 <_printf_i+0x168>
 800576a:	2301      	movs	r3, #1
 800576c:	4632      	mov	r2, r6
 800576e:	4649      	mov	r1, r9
 8005770:	4640      	mov	r0, r8
 8005772:	47d0      	blx	sl
 8005774:	3001      	adds	r0, #1
 8005776:	d09b      	beq.n	80056b0 <_printf_i+0x164>
 8005778:	3501      	adds	r5, #1
 800577a:	68e3      	ldr	r3, [r4, #12]
 800577c:	9903      	ldr	r1, [sp, #12]
 800577e:	1a5b      	subs	r3, r3, r1
 8005780:	42ab      	cmp	r3, r5
 8005782:	dcf2      	bgt.n	800576a <_printf_i+0x21e>
 8005784:	e7eb      	b.n	800575e <_printf_i+0x212>
 8005786:	2500      	movs	r5, #0
 8005788:	f104 0619 	add.w	r6, r4, #25
 800578c:	e7f5      	b.n	800577a <_printf_i+0x22e>
 800578e:	bf00      	nop
 8005790:	08005b91 	.word	0x08005b91
 8005794:	08005ba2 	.word	0x08005ba2

08005798 <_sbrk_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_sbrk_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fb fe70 	bl	8001488 <_sbrk>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_sbrk_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_sbrk_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200001a4 	.word	0x200001a4

080057b8 <__sread>:
 80057b8:	b510      	push	{r4, lr}
 80057ba:	460c      	mov	r4, r1
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	f000 f8e0 	bl	8005984 <_read_r>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	bfab      	itete	ge
 80057c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057ca:	89a3      	ldrhlt	r3, [r4, #12]
 80057cc:	181b      	addge	r3, r3, r0
 80057ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057d2:	bfac      	ite	ge
 80057d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057d6:	81a3      	strhlt	r3, [r4, #12]
 80057d8:	bd10      	pop	{r4, pc}

080057da <__swrite>:
 80057da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	461f      	mov	r7, r3
 80057e0:	898b      	ldrh	r3, [r1, #12]
 80057e2:	05db      	lsls	r3, r3, #23
 80057e4:	4605      	mov	r5, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	4616      	mov	r6, r2
 80057ea:	d505      	bpl.n	80057f8 <__swrite+0x1e>
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	2302      	movs	r3, #2
 80057f2:	2200      	movs	r2, #0
 80057f4:	f000 f868 	bl	80058c8 <_lseek_r>
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	4628      	mov	r0, r5
 800580a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580e:	f000 b817 	b.w	8005840 <_write_r>

08005812 <__sseek>:
 8005812:	b510      	push	{r4, lr}
 8005814:	460c      	mov	r4, r1
 8005816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581a:	f000 f855 	bl	80058c8 <_lseek_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	bf15      	itete	ne
 8005824:	6560      	strne	r0, [r4, #84]	; 0x54
 8005826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800582a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800582e:	81a3      	strheq	r3, [r4, #12]
 8005830:	bf18      	it	ne
 8005832:	81a3      	strhne	r3, [r4, #12]
 8005834:	bd10      	pop	{r4, pc}

08005836 <__sclose>:
 8005836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583a:	f000 b813 	b.w	8005864 <_close_r>
	...

08005840 <_write_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_write_r+0x20>)
 8005844:	4604      	mov	r4, r0
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	2200      	movs	r2, #0
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fb fdc9 	bl	80013e6 <_write>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_write_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_write_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200001a4 	.word	0x200001a4

08005864 <_close_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_close_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fdd5 	bl	800141e <_close>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_close_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_close_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	200001a4 	.word	0x200001a4

08005884 <_fstat_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_fstat_r+0x20>)
 8005888:	2300      	movs	r3, #0
 800588a:	4604      	mov	r4, r0
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	f7fb fdd0 	bl	8001436 <_fstat>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d102      	bne.n	80058a0 <_fstat_r+0x1c>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	b103      	cbz	r3, 80058a0 <_fstat_r+0x1c>
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	bd38      	pop	{r3, r4, r5, pc}
 80058a2:	bf00      	nop
 80058a4:	200001a4 	.word	0x200001a4

080058a8 <_isatty_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d06      	ldr	r5, [pc, #24]	; (80058c4 <_isatty_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fb fdcf 	bl	8001456 <_isatty>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_isatty_r+0x1a>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_isatty_r+0x1a>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	200001a4 	.word	0x200001a4

080058c8 <_lseek_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	; (80058e8 <_lseek_r+0x20>)
 80058cc:	4604      	mov	r4, r0
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f7fb fdc8 	bl	800146c <_lseek>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_lseek_r+0x1e>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_lseek_r+0x1e>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	200001a4 	.word	0x200001a4

080058ec <memmove>:
 80058ec:	4288      	cmp	r0, r1
 80058ee:	b510      	push	{r4, lr}
 80058f0:	eb01 0402 	add.w	r4, r1, r2
 80058f4:	d902      	bls.n	80058fc <memmove+0x10>
 80058f6:	4284      	cmp	r4, r0
 80058f8:	4623      	mov	r3, r4
 80058fa:	d807      	bhi.n	800590c <memmove+0x20>
 80058fc:	1e43      	subs	r3, r0, #1
 80058fe:	42a1      	cmp	r1, r4
 8005900:	d008      	beq.n	8005914 <memmove+0x28>
 8005902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800590a:	e7f8      	b.n	80058fe <memmove+0x12>
 800590c:	4402      	add	r2, r0
 800590e:	4601      	mov	r1, r0
 8005910:	428a      	cmp	r2, r1
 8005912:	d100      	bne.n	8005916 <memmove+0x2a>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800591a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800591e:	e7f7      	b.n	8005910 <memmove+0x24>

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__malloc_lock+0x8>)
 8005922:	f7ff bb39 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	2000019c 	.word	0x2000019c

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_unlock+0x8>)
 800592e:	f7ff bb34 	b.w	8004f9a <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	2000019c 	.word	0x2000019c

08005938 <_realloc_r>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	4607      	mov	r7, r0
 800593c:	4614      	mov	r4, r2
 800593e:	460e      	mov	r6, r1
 8005940:	b921      	cbnz	r1, 800594c <_realloc_r+0x14>
 8005942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005946:	4611      	mov	r1, r2
 8005948:	f7ff bbdc 	b.w	8005104 <_malloc_r>
 800594c:	b922      	cbnz	r2, 8005958 <_realloc_r+0x20>
 800594e:	f7ff fb89 	bl	8005064 <_free_r>
 8005952:	4625      	mov	r5, r4
 8005954:	4628      	mov	r0, r5
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	f000 f826 	bl	80059a8 <_malloc_usable_size_r>
 800595c:	42a0      	cmp	r0, r4
 800595e:	d20f      	bcs.n	8005980 <_realloc_r+0x48>
 8005960:	4621      	mov	r1, r4
 8005962:	4638      	mov	r0, r7
 8005964:	f7ff fbce 	bl	8005104 <_malloc_r>
 8005968:	4605      	mov	r5, r0
 800596a:	2800      	cmp	r0, #0
 800596c:	d0f2      	beq.n	8005954 <_realloc_r+0x1c>
 800596e:	4631      	mov	r1, r6
 8005970:	4622      	mov	r2, r4
 8005972:	f7fe ffed 	bl	8004950 <memcpy>
 8005976:	4631      	mov	r1, r6
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff fb73 	bl	8005064 <_free_r>
 800597e:	e7e9      	b.n	8005954 <_realloc_r+0x1c>
 8005980:	4635      	mov	r5, r6
 8005982:	e7e7      	b.n	8005954 <_realloc_r+0x1c>

08005984 <_read_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_read_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb fd0a 	bl	80013ac <_read>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_read_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_read_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200001a4 	.word	0x200001a4

080059a8 <_malloc_usable_size_r>:
 80059a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ac:	1f18      	subs	r0, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bfbc      	itt	lt
 80059b2:	580b      	ldrlt	r3, [r1, r0]
 80059b4:	18c0      	addlt	r0, r0, r3
 80059b6:	4770      	bx	lr

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
